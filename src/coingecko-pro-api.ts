/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * CoinGecko Pro API V3
 * OpenAPI spec version: 3.1.0
 */
import { request } from "./fetch";
export interface Ping {
  gecko_says?: string;
}

export interface Key {
  plan?: string;
  rate_limit_request_per_minute?: number;
  monthly_call_credit?: number;
  current_total_monthly_calls?: number;
  current_remaining_monthly_calls?: number;
}

export interface SimplePrice {
  /** price in USD */
  usd?: number;
  /** market cap in USD */
  usd_market_cap?: number;
  /** 24hr volume in USD */
  usd_24h_vol?: number;
  /** 24hr change in USD */
  usd_24h_change?: number;
  /** last updated timestamp */
  last_updated_at?: number;
}

export interface SimpleTokenPrice {
  /** price in USD */
  usd?: number;
  /** market cap in USD */
  usd_market_cap?: number;
  /** 24hr volume in USD */
  usd_24h_vol?: number;
  /** 24hr change in USD */
  usd_24h_change?: number;
  /** last updated timestamp */
  last_updated_at?: number;
}

export type CurrencyList = string[];

/**
 * coin asset platform and contract address
 */
export type CoinsListItemPlatforms = { [key: string]: string };

export type CoinsListItem = {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** coin asset platform and contract address */
  platforms?: CoinsListItemPlatforms;
};

export type CoinsList = CoinsListItem[];

export type TopGainersLosersItem = {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** coin image url */
  image?: string;
  /** coin rank by market cap */
  market_cap_rank?: number;
  /** coin price in USD */
  usd?: number;
  /** coin 24hr volume in USD */
  usd_24h_vol?: number;
  /** coin 1 year change in USD */
  usd_1y_change?: number;
};

export type TopGainersLosers = TopGainersLosersItem[];

export type CoinsListNewItem = {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** timestamp when coin was activated on CoinGecko */
  activated_at?: number;
};

export type CoinsListNew = CoinsListNewItem[];

/**
 * coin price sparkline in 7 days
 */
export type CoinsMarketsSparklineIn7d = {
  price?: number[];
};

export interface CoinsMarkets {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** coin image url */
  image?: string;
  /** coin current price in currency */
  current_price?: number;
  /** coin market cap in currency */
  market_cap?: number;
  /** coin rank by market cap */
  market_cap_rank?: number;
  /** coin fully diluted valuation (fdv) in currency */
  fully_diluted_valuation?: number;
  /** coin total trading volume in currency */
  total_volume?: number;
  /** coin 24hr price high in currency */
  high_24h?: number;
  /** coin 24hr price low in currency */
  low_24h?: number;
  /** coin 24hr price change in currency */
  price_change_24h?: number;
  /** coin 24hr price change in percentage */
  price_change_percentage_24h?: number;
  /** coin 24hr market cap change in currency */
  market_cap_change_24h?: number;
  /** coin 24hr market cap change in percentage */
  market_cap_change_percentage_24h?: number;
  /** coin circulating supply */
  circulating_supply?: number;
  /** coin total supply */
  total_supply?: number;
  /** coin max supply */
  max_supply?: number;
  /** coin all time high (ATH) in currency */
  ath?: number;
  /** coin all time high (ATH) change in percentage */
  ath_change_percentage?: number;
  /** coin all time high (ATH) date */
  ath_date?: string;
  /** coin all time low (atl) in currency */
  atl?: number;
  /** coin all time low (atl) change in percentage */
  atl_change_percentage?: number;
  /** coin all time low (atl) date */
  atl_date?: string;
  roi?: string;
  /** coin last updated timestamp */
  last_updated?: string;
  /** coin 1h price change in percentage */
  price_change_percentage_1h?: number;
  /** coin price sparkline in 7 days */
  sparkline_in_7d?: CoinsMarketsSparklineIn7d;
}

/**
 * coin asset platform and contract address
 */
export type CoinsDataBasePlatforms = { [key: string]: string };

/**
 * detailed coin asset platform and contract address
 */
export type CoinsDataBaseDetailPlatforms = { [key: string]: string };

/**
 * coin name localization
 */
export type CoinsDataBaseLocalization = { [key: string]: string };

/**
 * coin description
 */
export type CoinsDataBaseDescription = { [key: string]: string };

/**
 * coin repository url
 */
export type CoinsDataBaseLinksReposUrl = {
  /** coin github repository url */
  github?: string[];
  /** coin bitbucket repository url */
  bitbucket?: string[];
};

/**
 * links
 */
export type CoinsDataBaseLinks = {
  /** coin website url */
  homepage?: string[];
  /** coin whitepaper url */
  whitepaper?: string[];
  /** coin block explorer url */
  blockchain_site?: string[];
  /** coin official forum url */
  official_forum_url?: string[];
  /** coin chat url */
  chat_url?: string[];
  /** coin announcement url */
  announcement_url?: string[];
  /** coin snapshot url */
  snapshot_url?: string;
  /** coin twitter handle */
  twitter_screen_name?: string;
  /** coin facebook username */
  facebook_username?: string;
  /** coin bitcointalk thread identifier */
  bitcointalk_thread_identifier?: string;
  /** coin telegram channel identifier */
  telegram_channel_identifier?: string;
  /** coin subreddit url */
  subreddit_url?: string;
  /** coin repository url */
  repos_url?: CoinsDataBaseLinksReposUrl;
};

/**
 * coin image url
 */
export type CoinsDataBaseImage = {
  thumb?: string;
  small?: string;
  large?: string;
};

/**
 * coin current price in currency
 */
export type CoinsDataBaseMarketDataCurrentPrice = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin all time high (ATH) in currency
 */
export type CoinsDataBaseMarketDataAth = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin all time high (ATH) change in percentage
 */
export type CoinsDataBaseMarketDataAthChangePercentage = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin all time high (ATH) date
 */
export type CoinsDataBaseMarketDataAthDate = {
  btc?: string;
  eur?: string;
  usd?: string;
};

/**
 * coin all time low (atl) in currency
 */
export type CoinsDataBaseMarketDataAtl = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin all time low (atl) change in percentage
 */
export type CoinsDataBaseMarketDataAtlChangePercentage = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin all time low (atl) date
 */
export type CoinsDataBaseMarketDataAtlDate = {
  btc?: string;
  eur?: string;
  usd?: string;
};

/**
 * coin market cap in currency
 */
export type CoinsDataBaseMarketDataMarketCap = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin fully diluted valuation (fdv) in currency
 */
export type CoinsDataBaseMarketDataFullyDilutedValuation = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin total trading volume in currency
 */
export type CoinsDataBaseMarketDataTotalVolume = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 24hr price high in currency
 */
export type CoinsDataBaseMarketDataHigh24h = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 24hr price low in currency
 */
export type CoinsDataBaseMarketDataLow24h = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 1h price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage1hInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 24hr price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage24hInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 7d price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage7dInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 14d price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage14dInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 30d price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage30dInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 60d price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage60dInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 200d price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage200dInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 1y price change in currency
 */
export type CoinsDataBaseMarketDataPriceChangePercentage1yInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 24hr market cap change in currency
 */
export type CoinsDataBaseMarketDataMarketCapChange24hInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin 24hr market cap change in percentage
 */
export type CoinsDataBaseMarketDataMarketCapChangePercentage24hInCurrency = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin market data
 */
export type CoinsDataBaseMarketData = {
  /** coin current price in currency */
  current_price?: CoinsDataBaseMarketDataCurrentPrice;
  /** total value locked */
  total_value_locked?: number;
  /** market cap to total value locked ratio */
  mcap_to_tvl_ratio?: number;
  /** fully diluted valuation to total value locked ratio */
  fdv_to_tvl_ratio?: number;
  /** coin return on investment */
  roi?: number;
  /** coin all time high (ATH) in currency */
  ath?: CoinsDataBaseMarketDataAth;
  /** coin all time high (ATH) change in percentage */
  ath_change_percentage?: CoinsDataBaseMarketDataAthChangePercentage;
  /** coin all time high (ATH) date */
  ath_date?: CoinsDataBaseMarketDataAthDate;
  /** coin all time low (atl) in currency */
  atl?: CoinsDataBaseMarketDataAtl;
  /** coin all time low (atl) change in percentage */
  atl_change_percentage?: CoinsDataBaseMarketDataAtlChangePercentage;
  /** coin all time low (atl) date */
  atl_date?: CoinsDataBaseMarketDataAtlDate;
  /** coin market cap in currency */
  market_cap?: CoinsDataBaseMarketDataMarketCap;
  /** coin rank by market cap */
  market_cap_rank?: number;
  /** coin fully diluted valuation (fdv) in currency */
  fully_diluted_valuation?: CoinsDataBaseMarketDataFullyDilutedValuation;
  /** market cap to fully diluted valuation ratio */
  market_cap_fdv_ratio?: number;
  /** coin total trading volume in currency */
  total_volume?: CoinsDataBaseMarketDataTotalVolume;
  /** coin 24hr price high in currency */
  high_24h?: CoinsDataBaseMarketDataHigh24h;
  /** coin 24hr price low in currency */
  low_24h?: CoinsDataBaseMarketDataLow24h;
  /** coin 24hr price change in currency */
  price_change_24h?: number;
  /** coin 24hr price change in percentage */
  price_change_percentage_24h?: number;
  /** coin 7d price change in percentage */
  price_change_percentage_7d?: number;
  /** coin 14d price change in percentage */
  price_change_percentage_14d?: number;
  /** coin 30d price change in percentage */
  price_change_percentage_30d?: number;
  /** coin 60d price change in percentage */
  price_change_percentage_60d?: number;
  /** coin 200d price change in percentage */
  price_change_percentage_200d?: number;
  /** coin 1y price change in percentage */
  price_change_percentage_1y?: number;
  /** coin 24hr market cap change in currency */
  market_cap_change_24h?: number;
  /** coin 24hr market cap change in percentage */
  market_cap_change_percentage_24h?: number;
  /** coin 1h price change in currency */
  price_change_percentage_1h_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage1hInCurrency;
  /** coin 24hr price change in currency */
  price_change_percentage_24h_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage24hInCurrency;
  /** coin 7d price change in currency */
  price_change_percentage_7d_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage7dInCurrency;
  /** coin 14d price change in currency */
  price_change_percentage_14d_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage14dInCurrency;
  /** coin 30d price change in currency */
  price_change_percentage_30d_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage30dInCurrency;
  /** coin 60d price change in currency */
  price_change_percentage_60d_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage60dInCurrency;
  /** coin 200d price change in currency */
  price_change_percentage_200d_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage200dInCurrency;
  /** coin 1y price change in currency */
  price_change_percentage_1y_in_currency?: CoinsDataBaseMarketDataPriceChangePercentage1yInCurrency;
  /** coin 24hr market cap change in currency */
  market_cap_change_24h_in_currency?: CoinsDataBaseMarketDataMarketCapChange24hInCurrency;
  /** coin 24hr market cap change in percentage */
  market_cap_change_percentage_24h_in_currency?: CoinsDataBaseMarketDataMarketCapChangePercentage24hInCurrency;
  /** coin total supply */
  total_supply?: number;
  /** coin max supply */
  max_supply?: number;
  /** coin circulating supply */
  circulating_supply?: number;
  /** coin market data last updated timestamp */
  last_updated?: string;
};

/**
 * coin community data
 */
export type CoinsDataBaseCommunityData = {
  /** coin facebook likes */
  facebook_likes?: number;
  /** coin twitter followers */
  twitter_followers?: number;
  /** coin reddit average posts in 48 hours */
  reddit_average_posts_48h?: number;
  /** coin reddit average comments in 48 hours */
  reddit_average_comments_48h?: number;
  /** coin reddit subscribers */
  reddit_subscribers?: number;
  /** coin reddit active accounts in 48 hours */
  reddit_accounts_active_48h?: number;
  /** coin telegram channel user count */
  telegram_channel_user_count?: number;
};

/**
 * coin code additions and deletions in 4 weeks
 */
export type CoinsDataBaseDeveloperDataCodeAdditionsDeletions4Weeks = {
  additions?: number;
  deletions?: number;
};

/**
 * coin developer data
 */
export type CoinsDataBaseDeveloperData = {
  /** coin repository forks */
  forks?: number;
  /** coin repository stars */
  stars?: number;
  /** coin repository subscribers */
  subscribers?: number;
  /** coin repository total issues */
  total_issues?: number;
  /** coin repository closed issues */
  closed_issues?: number;
  /** coin repository pull requests merged */
  pull_requests_merged?: number;
  /** coin repository pull request contributors */
  pull_request_contributors?: number;
  /** coin code additions and deletions in 4 weeks */
  code_additions_deletions_4_weeks?: CoinsDataBaseDeveloperDataCodeAdditionsDeletions4Weeks;
  /** coin repository commit count in 4 weeks */
  commit_count_4_weeks?: number;
  /** coin repository last 4 weeks commit activity series */
  last_4_weeks_commit_activity_series?: number[];
};

export type CoinsDataBaseStatusUpdatesItem = { [key: string]: unknown };

/**
 * coin ticker exchange
 */
export type CoinsDataBaseTickersItemMarket = {
  /** coin ticker exchange name */
  name?: string;
  /** coin ticker exchange identifier */
  identifier?: string;
  /** coin ticker exchange trading incentive */
  has_trading_incentive?: boolean;
};

/**
 * coin ticker converted last price
 */
export type CoinsDataBaseTickersItemConvertedLast = {
  btc?: number;
  eth?: number;
  usd?: number;
};

/**
 * coin ticker converted volume
 */
export type CoinsDataBaseTickersItemConvertedVolume = {
  btc?: number;
  eth?: number;
  usd?: number;
};

export type CoinsDataBaseTickersItem = {
  /** coin ticker base currency */
  base?: string;
  /** coin ticker target currency */
  target?: string;
  /** coin ticker exchange */
  market?: CoinsDataBaseTickersItemMarket;
  /** coin ticker last price */
  last?: number;
  /** coin ticker volume */
  volume?: number;
  /** coin ticker converted last price */
  converted_last?: CoinsDataBaseTickersItemConvertedLast;
  /** coin ticker converted volume */
  converted_volume?: CoinsDataBaseTickersItemConvertedVolume;
  /** coin ticker trust score */
  trust_score?: string;
  /** coin ticker bid ask spread percentage */
  bid_ask_spread_percentage?: number;
  /** coin ticker timestamp */
  timestamp?: string;
  /** coin ticker last traded timestamp */
  last_traded_at?: string;
  /** coin ticker last fetch timestamp */
  last_fetch_at?: string;
  /** coin ticker anomaly */
  is_anomaly?: boolean;
  /** coin ticker stale */
  is_stale?: boolean;
  /** coin ticker trade url */
  trade_url?: string;
  /** coin ticker token info url */
  token_info_url?: string;
  /** coin ticker base currency coin ID */
  coin_id?: string;
  /** coin ticker target currency coin ID */
  target_coin_id?: string;
};

export interface CoinsDataBase {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** coin web slug */
  web_slug?: string;
  /** coin asset platform ID */
  asset_platform_id?: string;
  /** coin asset platform and contract address */
  platforms?: CoinsDataBasePlatforms;
  /** detailed coin asset platform and contract address */
  detail_platforms?: CoinsDataBaseDetailPlatforms;
  /** blockchain block time in minutes */
  block_time_in_minutes?: number;
  /** blockchain hashing algorithm */
  hashing_algorithm?: string;
  /** coin categories */
  categories?: string[];
  /** preview listing coin */
  preview_listing?: boolean;
  /** public notice */
  public_notice?: string;
  /** additional notices */
  additional_notices?: string[];
  /** coin name localization */
  localization?: CoinsDataBaseLocalization;
  /** coin description */
  description?: CoinsDataBaseDescription;
  /** links */
  links?: CoinsDataBaseLinks;
  /** coin image url */
  image?: CoinsDataBaseImage;
  /** coin country of origin */
  country_origin?: string;
  /** coin genesis date */
  genesis_date?: string;
  /** coin sentiment votes up percentage */
  sentiment_votes_up_percentage?: number;
  /** coin sentiment votes down percentage */
  sentiment_votes_down_percentage?: number;
  /** coin rank by market cap */
  market_cap_rank?: number;
  /** coin market data */
  market_data?: CoinsDataBaseMarketData;
  /** coin community data */
  community_data?: CoinsDataBaseCommunityData;
  /** coin developer data */
  developer_data?: CoinsDataBaseDeveloperData;
  /** coin status updates */
  status_updates?: CoinsDataBaseStatusUpdatesItem[];
  /** coin last updated timestamp */
  last_updated?: string;
  /** coin tickers */
  tickers?: CoinsDataBaseTickersItem[];
}

export type CoinsID = CoinsDataBase & unknown;

/**
 * coin ticker exchange
 */
export type CoinsTickersTickersItemMarket = {
  /** exchange name */
  name: string;
  /** exchange identifier */
  identifier: string;
  /** exchange trading incentive */
  has_trading_incentive: boolean;
  /** exchange image url */
  logo?: string;
};

/**
 * coin ticker converted last price
 */
export type CoinsTickersTickersItemConvertedLast = {
  btc?: number;
  eth?: number;
  usd?: number;
};

/**
 * coin ticker converted volume
 */
export type CoinsTickersTickersItemConvertedVolume = {
  btc?: number;
  eth?: number;
  usd?: number;
};

export type CoinsTickersTickersItem = {
  /** coin ticker base currency */
  base?: string;
  /** coin ticker target currency */
  target?: string;
  /** coin ticker exchange */
  market?: CoinsTickersTickersItemMarket;
  /** coin ticker last price */
  last?: number;
  /** coin ticker volume */
  volume?: number;
  /** coin ticker cost to move up in usd */
  cost_to_move_up_usd?: number;
  /** coin ticker cost to move down in usd */
  cost_to_move_down_usd?: number;
  /** coin ticker converted last price */
  converted_last?: CoinsTickersTickersItemConvertedLast;
  /** coin ticker converted volume */
  converted_volume?: CoinsTickersTickersItemConvertedVolume;
  /** coin ticker trust score */
  trust_score?: string;
  /** coin ticker bid ask spread percentage */
  bid_ask_spread_percentage?: number;
  /** coin ticker timestamp */
  timestamp?: string;
  /** coin ticker last traded timestamp */
  last_traded_at?: string;
  /** coin ticker last fetch timestamp */
  last_fetch_at?: string;
  /** coin ticker anomaly */
  is_anomaly?: boolean;
  /** coin ticker stale */
  is_stale?: boolean;
  /** coin ticker trade url */
  trade_url?: string;
  /**
   * coin ticker token info url
   * @nullable
   */
  token_info_url?: string | null;
  /** coin ticker base currency coin ID */
  coin_id?: string;
  /** coin ticker target currency coin ID */
  target_coin_id?: string;
};

export interface CoinsTickers {
  /** coin name */
  name?: string;
  /** list of tickers */
  tickers?: CoinsTickersTickersItem[];
}

/**
 * coin localization
 */
export type CoinsHistoricalDataLocalization = { [key: string]: string };

/**
 * coin image url
 */
export type CoinsHistoricalDataImage = {
  thumb?: string;
  small?: string;
};

/**
 * coin current price
 */
export type CoinsHistoricalDataMarketDataCurrentPrice = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin market cap
 */
export type CoinsHistoricalDataMarketDataMarketCap = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin total volume
 */
export type CoinsHistoricalDataMarketDataTotalVolume = {
  btc?: number;
  eur?: number;
  usd?: number;
};

/**
 * coin market data
 */
export type CoinsHistoricalDataMarketData = {
  /** coin current price */
  current_price?: CoinsHistoricalDataMarketDataCurrentPrice;
  /** coin market cap */
  market_cap?: CoinsHistoricalDataMarketDataMarketCap;
  /** coin total volume */
  total_volume?: CoinsHistoricalDataMarketDataTotalVolume;
};

/**
 * coin community data
 */
export type CoinsHistoricalDataCommunityData = {
  /** coin facebook likes */
  facebook_likes?: number;
  /** coin twitter followers */
  twitter_followers?: number;
  /** coin reddit average posts 48h */
  reddit_average_posts_48h?: number;
  /** coin reddit average comments 48h */
  reddit_average_comments_48h?: number;
  /** coin reddit subscribers */
  reddit_subscribers?: number;
  /** coin reddit accounts active 48h */
  reddit_accounts_active_48h?: number;
};

/**
 * coin code additions deletions 4 weeks
 */
export type CoinsHistoricalDataDeveloperDataCodeAdditionsDeletions4Weeks = {
  additions?: number;
  deletions?: number;
};

/**
 * coin developer data
 */
export type CoinsHistoricalDataDeveloperData = {
  /** coin repository forks */
  forks?: number;
  /** coin repository stars */
  stars?: number;
  /** coin repository subscribers */
  subscribers?: number;
  /** coin repository total issues */
  total_issues?: number;
  /** coin repository closed issues */
  closed_issues?: number;
  /** coin repository pull requests merged */
  pull_requests_merged?: number;
  /** coin repository pull request contributors */
  pull_request_contributors?: number;
  /** coin code additions deletions 4 weeks */
  code_additions_deletions_4_weeks?: CoinsHistoricalDataDeveloperDataCodeAdditionsDeletions4Weeks;
  /** coin commit count 4 weeks */
  commit_count_4_weeks?: number;
};

/**
 * coin public interest stats
 */
export type CoinsHistoricalDataPublicInterestStats = {
  /** coin alexa rank */
  alexa_rank?: number;
  /** coin bing matches */
  bing_matches?: number;
};

export interface CoinsHistoricalData {
  /** coin ID */
  id?: string;
  /** coin symbol */
  symbol?: string;
  /** coin name */
  name?: string;
  /** coin localization */
  localization?: CoinsHistoricalDataLocalization;
  /** coin image url */
  image?: CoinsHistoricalDataImage;
  /** coin market data */
  market_data?: CoinsHistoricalDataMarketData;
  /** coin community data */
  community_data?: CoinsHistoricalDataCommunityData;
  /** coin developer data */
  developer_data?: CoinsHistoricalDataDeveloperData;
  /** coin public interest stats */
  public_interest_stats?: CoinsHistoricalDataPublicInterestStats;
}

export interface CoinsMarketChart {
  prices?: number[][];
  market_caps?: number[][];
  total_volumes?: number[][];
}

export interface CoinsMarketChartRange {
  prices?: number[][];
  market_caps?: number[][];
  total_volumes?: number[][];
}

export type CoinsOHLC = number[][];

export type TotalSupplyChartBaseTotalSupplyItemItem = number | string;

export interface TotalSupplyChartBase {
  total_supply?: TotalSupplyChartBaseTotalSupplyItemItem[][];
}

export type CirculatingSupplyChartBaseCirculatingSupplyItemItem =
  | number
  | string;

export interface CirculatingSupplyChartBase {
  circulating_supply?: CirculatingSupplyChartBaseCirculatingSupplyItemItem[][];
}

export type CoinsContractAddress = CoinsDataBase & unknown;

/**
 * image of the asset platform
 */
export type AssetPlatformsItemImage = {
  large?: string;
  small?: string;
  thumb?: string;
};

export type AssetPlatformsItem = {
  /** asset platform ID */
  id?: string;
  /**
   * chainlist's chain ID
   * @nullable
   */
  chain_identifier?: number | null;
  /** chain name */
  name?: string;
  /** chain shortname */
  shortname?: string;
  /** chain native coin ID */
  native_coin_id?: string;
  /** image of the asset platform */
  image?: AssetPlatformsItemImage;
};

export type AssetPlatforms = AssetPlatformsItem[];

export type TokenListsTokensItem = {
  /** chainlist's chain ID */
  chainId?: number;
  /** token contract address */
  address?: string;
  /** token name */
  name?: string;
  /** token symbol */
  symbol?: string;
  /** token decimals */
  decimals?: number;
  /** token image url */
  logoURI?: string;
};

export interface TokenLists {
  name?: string;
  logoURI?: string;
  keywords?: string[];
  timestamp?: string;
  tokens?: TokenListsTokensItem[];
}

export interface CategoriesList {
  /** category ID */
  category_id?: string;
  /** category name */
  name?: string;
}

export interface Categories {
  /** category ID */
  id?: string;
  /** category name */
  name?: string;
  /** category market cap */
  market_cap?: number;
  /** category market cap change in 24 hours */
  market_cap_change_24h?: number;
  /** category description */
  content?: string;
  /** IDs of top 3 coins in the category */
  top_3_coins_id?: string[];
  /** images of top 3 coins in the category */
  top_3_coins?: string[];
  /** category volume in 24 hours */
  volume_24h?: number;
  /** category last updated time */
  updated_at?: string;
}

export interface Exchanges {
  /** exchange ID */
  id?: string;
  /** exchange name */
  name?: string;
  /** exchange established year */
  year_established?: number;
  /** exchange country */
  country?: string;
  /** exchange description */
  description?: string;
  /** exchange website url */
  url?: string;
  /** exchange image url */
  image?: string;
  /** exchange trading incentive */
  has_trading_incentive?: boolean;
  /** exchange trust score */
  trust_score?: number;
  /** exchange trust score rank */
  trust_score_rank?: number;
  /** exchange trade volume in BTC in 24 hours */
  trade_volume_24h_btc?: number;
  /** normalized trading volume by traffic in BTC in 24 hours <br> *refers to [`this blog`](https://blog.coingecko.com/trust-score/). */
  trade_volume_24h_btc_normalized?: number;
}

export interface ExchangesList {
  /** exchange ID */
  id?: string;
  /** exchange name */
  name?: string;
}

export interface ExchangeData {
  /** exchange name */
  name?: string;
  /** exchange established year */
  year_established?: number;
  /** exchange incorporated country */
  country?: string;
  /** exchange description */
  description?: string;
  /** exchange website url */
  url?: string;
  /** exchange image url */
  image?: string;
  /** exchange facebook url */
  facebook_url?: string;
  /** exchange reddit url */
  reddit_url?: string;
  /** exchange telegram url */
  telegram_url?: string;
  /** exchange slack url */
  slack_url?: string;
  other_url_1?: string;
  other_url_2?: string;
  /** exchange twitter handle */
  twitter_handle?: string;
  /** exchange trading incentive */
  has_trading_incentive?: boolean;
  /** exchange type (true for centralized, false for decentralized) */
  centralized?: boolean;
  /** public notice for exchange */
  public_notice?: string;
  /** alert notice for exchange */
  alert_notice?: string;
  /** exchange trust score */
  trust_score?: number;
  /** exchange trust score rank */
  trust_score_rank?: number;
  trade_volume_24h_btc?: number;
  /** normalized trading volume by traffic in BTC in 24 hours <br> *refers to [`this blog`](https://blog.coingecko.com/trust-score/). */
  trade_volume_24h_btc_normalized?: number;
  /** number of coins listed on the exchange */
  coins?: number;
  /** number of trading pairs on the exchange */
  pairs?: number;
  tickers?: CoinsTickers[];
}

export type ExchangeTickers = CoinsTickers & unknown;

export type ExchangeVolumeChart = number[][];

export interface DerivativesTickersList {
  /** derivative market name */
  market?: string;
  /** derivative ticker symbol */
  symbol?: string;
  /** derivative underlying asset */
  index_id?: string;
  /** derivative ticker price */
  price?: string;
  /** derivative ticker price percentage change in 24 hours */
  price_percentage_change_24h?: number;
  /** derivative contract type */
  contract_type?: string;
  /** derivative underlying asset price */
  index?: number;
  /** difference of derivative price and index price */
  basis?: number;
  /** derivative bid ask spread */
  spread?: number;
  /** derivative funding rate */
  funding_rate?: number;
  /** derivative open interest */
  open_interest?: number;
  /** derivative volume in 24 hours */
  volume_24h?: number;
  /** derivative last updated time */
  last_traded_at?: number;
  /** @nullable */
  expired_at?: string | null;
}

export interface DerivativesExchanges {
  /** derivatives exchange name */
  name?: string;
  /** derivatives exchange ID */
  id?: string;
  /** derivatives exchange open interest in BTC */
  open_interest_btc?: number;
  /** derivatives exchange trade volume in BTC in 24 hours */
  trade_volume_24h_btc?: string;
  /** number of perpetual pairs in the derivatives exchange */
  number_of_perpetual_pairs?: number;
  /** number of futures pairs in the derivatives exchange */
  number_of_futures_pairs?: number;
  /** derivatives exchange image url */
  image?: string;
  /**
   * derivatives exchange established year
   * @nullable
   */
  year_established?: number | null;
  /**
   * derivatives exchange incorporated country
   * @nullable
   */
  country?: string | null;
  /** derivatives exchange description */
  description?: string;
  /** derivatives exchange website url */
  url?: string;
}

export interface DerivativesExchangesID {
  /** derivatives exchange name */
  name?: string;
  /** derivatives exchange open interest in BTC */
  open_interest_btc?: number;
  /** derivatives exchange trade volume in BTC in 24 hours */
  trade_volume_24h_btc?: string;
  /** number of perpetual pairs in the derivatives exchange */
  number_of_perpetual_pairs?: number;
  /** number of futures pairs in the derivatives exchange */
  number_of_futures_pairs?: number;
  /** derivatives exchange image url */
  image?: string;
  /**
   * derivatives exchange established year
   * @nullable
   */
  year_established?: number | null;
  /**
   * derivatives exchange incorporated country
   * @nullable
   */
  country?: string | null;
  /** derivatives exchange description */
  description?: string;
  /** derivatives exchange website url */
  url?: string;
  tickers?: DerivativesTickersList[];
}

export interface DerivativesExchangesList {
  /** derivatives exchange ID */
  id?: string;
  /** derivatives exchange name */
  name?: string;
}

export interface NFTList {
  /** NFT collection ID */
  id?: string;
  /** NFT collection contract address */
  contract_address?: string;
  /** NFT collection name */
  name?: string;
  /** NFT collection asset platform ID */
  asset_platform_id?: string;
  /** NFT collection symbol */
  symbol?: string;
}

/**
 * NFT collection image url
 */
export type NFTDataImage = {
  small?: string;
  small_2x?: string;
};

/**
 * NFT collection banner image url
 */
export type NFTDataBannerImage = {
  small?: string;
};

/**
 * NFT collection floor price
 */
export type NFTDataFloorPrice = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection market cap
 */
export type NFTDataMarketCap = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection volume in 24 hours
 */
export type NFTDataVolume24h = {
  native_currency?: number;
  usd?: number;
};

export type NFTDataFloorPrice24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection market cap 24 hours percentage change
 */
export type NFTDataMarketCap24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection volume in 24 hours percentage change
 */
export type NFTDataVolume24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection links
 */
export type NFTDataLinks = {
  homepage?: string;
  twitter?: string;
  discord?: string;
};

/**
 * NFT collection floor price 7 days percentage change
 */
export type NFTDataFloorPrice7dPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection floor price 14 days percentage change
 */
export type NFTDataFloorPrice14dPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection floor price 30 days percentage change
 */
export type NFTDataFloorPrice30dPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection floor price 60 days percentage change
 */
export type NFTDataFloorPrice60dPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection floor price 1 year percentage change
 */
export type NFTDataFloorPrice1yPercentageChange = {
  usd?: number;
  native_currency?: number;
};

export type NFTDataExplorersItem = {
  name?: string;
  link?: string;
};

/**
 * NFT collection all time highs
 */
export type NFTDataAth = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection all time highs change percentage
 */
export type NFTDataAthChangePercentage = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection all time highs date
 */
export type NFTDataAthDate = {
  native_currency?: string;
  usd?: string;
};

export interface NFTData {
  /** NFT collection ID */
  id?: string;
  /** NFT collection contract address */
  contract_address?: string;
  /** NFT collection asset platform ID */
  asset_platform_id?: string;
  /** NFT collection name */
  name?: string;
  /** NFT collection symbol */
  symbol?: string;
  /** NFT collection image url */
  image?: NFTDataImage;
  /** NFT collection banner image url */
  banner_image?: NFTDataBannerImage;
  /** NFT collection description */
  description?: string;
  /** NFT collection native currency */
  native_currency?: string;
  /** NFT collection native currency symbol */
  native_currency_symbol?: string;
  /** coin market cap rank */
  market_cap_rank?: number;
  /** NFT collection floor price */
  floor_price?: NFTDataFloorPrice;
  /** NFT collection market cap */
  market_cap?: NFTDataMarketCap;
  /** NFT collection volume in 24 hours */
  volume_24h?: NFTDataVolume24h;
  /** NFT collection floor price in usd 24 hours percentage change */
  floor_price_in_usd_24h_percentage_change?: number;
  floor_price_24h_percentage_change?: NFTDataFloorPrice24hPercentageChange;
  /** NFT collection market cap 24 hours percentage change */
  market_cap_24h_percentage_change?: NFTDataMarketCap24hPercentageChange;
  /** NFT collection volume in 24 hours percentage change */
  volume_24h_percentage_change?: NFTDataVolume24hPercentageChange;
  /** number of unique address owning the NFTs */
  number_of_unique_addresses?: number;
  /** number of unique address owning the NFTs 24 hours percentage change */
  number_of_unique_addresses_24h_percentage_change?: number;
  /** NFT collection volume in usd 24 hours percentage change */
  volume_in_usd_24h_percentage_change?: number;
  /** NFT collection total supply */
  total_supply?: number;
  /** NFT collection one day sales */
  one_day_sales?: number;
  /** NFT collection one day sales 24 hours percentage change */
  one_day_sales_24h_percentage_change?: number;
  /** NFT collection one day average sale price */
  one_day_average_sale_price?: number;
  /** NFT collection one day average sale price 24 hours percentage change */
  one_day_average_sale_price_24h_percentage_change?: number;
  /** NFT collection links */
  links?: NFTDataLinks;
  /** NFT collection floor price 7 days percentage change */
  floor_price_7d_percentage_change?: NFTDataFloorPrice7dPercentageChange;
  /** NFT collection floor price 14 days percentage change */
  floor_price_14d_percentage_change?: NFTDataFloorPrice14dPercentageChange;
  /** NFT collection floor price 30 days percentage change */
  floor_price_30d_percentage_change?: NFTDataFloorPrice30dPercentageChange;
  /** NFT collection floor price 60 days percentage change */
  floor_price_60d_percentage_change?: NFTDataFloorPrice60dPercentageChange;
  /** NFT collection floor price 1 year percentage change */
  floor_price_1y_percentage_change?: NFTDataFloorPrice1yPercentageChange;
  /** NFT collection block explorers links */
  explorers?: NFTDataExplorersItem[];
  /** NFT collection user favorites count */
  user_favorites_count?: number;
  /** NFT collection all time highs */
  ath?: NFTDataAth;
  /** NFT collection all time highs change percentage */
  ath_change_percentage?: NFTDataAthChangePercentage;
  /** NFT collection all time highs date */
  ath_date?: NFTDataAthDate;
}

/**
 * NFT collection image url
 */
export type NFTsMarketsItemImage = {
  small?: string;
  small_2x?: string;
};

/**
 * NFT collection floor price
 */
export type NFTsMarketsItemFloorPrice = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection market cap
 */
export type NFTsMarketsItemMarketCap = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection volume in 24 hours
 */
export type NFTsMarketsItemVolume24h = {
  native_currency?: number;
  usd?: number;
};

/**
 * NFT collection floor price 24 hours percentage change
 */
export type NFTsMarketsItemFloorPrice24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection market cap 24 hours percentage change
 */
export type NFTsMarketsItemMarketCap24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

/**
 * NFT collection volume in 24 hours percentage change
 */
export type NFTsMarketsItemVolume24hPercentageChange = {
  usd?: number;
  native_currency?: number;
};

export type NFTsMarketsItem = {
  /** NFT collection ID */
  id?: string;
  /** NFT collection contract address */
  contract_address?: string;
  /** NFT collection asset platform ID */
  asset_platform_id?: string;
  /** NFT collection name */
  name?: string;
  /** NFT collection symbol */
  symbol?: string;
  /** NFT collection image url */
  image?: NFTsMarketsItemImage;
  /** NFT collection description */
  description?: string;
  /** NFT collection native currency */
  native_currency?: string;
  /** NFT collection native currency symbol */
  native_currency_symbol?: string;
  /** coin market cap rank */
  market_cap_rank?: number;
  /** NFT collection floor price */
  floor_price?: NFTsMarketsItemFloorPrice;
  /** NFT collection market cap */
  market_cap?: NFTsMarketsItemMarketCap;
  /** NFT collection volume in 24 hours */
  volume_24h?: NFTsMarketsItemVolume24h;
  /** NFT collection floor price in usd 24 hours percentage change */
  floor_price_in_usd_24h_percentage_change?: number;
  /** NFT collection floor price 24 hours percentage change */
  floor_price_24h_percentage_change?: NFTsMarketsItemFloorPrice24hPercentageChange;
  /** NFT collection market cap 24 hours percentage change */
  market_cap_24h_percentage_change?: NFTsMarketsItemMarketCap24hPercentageChange;
  /** NFT collection volume in 24 hours percentage change */
  volume_24h_percentage_change?: NFTsMarketsItemVolume24hPercentageChange;
  /** number of unique address owning the NFTs */
  number_of_unique_addresses?: number;
  /** number of unique address owning the NFTs 24 hours percentage change */
  number_of_unique_addresses_24h_percentage_change?: number;
  /** NFT collection volume in usd 24 hours percentage change */
  volume_in_usd_24h_percentage_change?: number;
  /** NFT collection total supply */
  total_supply?: number;
  /** NFT collection one day sales */
  one_day_sales?: number;
  /** NFT collection one day sales 24 hours percentage change */
  one_day_sales_24h_percentage_change?: number;
  /** NFT collection one day average sale price */
  one_day_average_sale_price?: number;
  /** NFT collection one day average sale price 24 hours percentage change */
  one_day_average_sale_price_24h_percentage_change?: number;
};

export type NFTsMarkets = NFTsMarketsItem[];

export interface NFTMarketChart {
  /** NFT collection floor price in usd */
  floor_price_usd?: number[][];
  /** NFT collection floor price in native currency */
  floor_price_native?: number[][];
  /** NFT collection volume in 24 hours in usd */
  h24_volume_usd?: number[][];
  /** NFT collection volume in 24 hours in native currency */
  h24_volume_native?: number[][];
  /** NFT collection market cap in usd */
  market_cap_usd?: number[][];
  /** NFT collection market cap in native currency */
  market_cap_native?: number[][];
}

export type NFTTickersTickersItem = {
  /** NFT collection floor price in native currency */
  floor_price_in_native_currency?: number;
  /** NFT collection volume in 24 hours in native currency */
  h24_volume_in_native_currency?: number;
  /** NFT collection native currency */
  native_currency?: string;
  /** NFT collection native currency symbol */
  native_currency_symbol?: string;
  /** last updated time */
  updated_at?: string;
  /** NFT marketplace ID */
  nft_marketplace_id?: string;
  /** NFT marketplace name */
  name?: string;
  /** NFT marketplace image url */
  image?: string;
  /** NFT collection url in the NFT marketplace */
  nft_collection_url?: string;
};

export interface NFTTickers {
  tickers?: NFTTickersTickersItem[];
}

export type ExchangeRatesRates = {
  [key: string]: {
    /** name of the currency */
    name?: string;
    /** unit of the currency */
    unit?: string;
    /** value of the currency */
    value?: number;
    /** type of the currency */
    type?: string;
  };
};

export interface ExchangeRates {
  rates?: ExchangeRatesRates;
}

export type SearchCoinsItem = {
  /** coin ID */
  id?: string;
  /** coin name */
  name?: string;
  /** coin api symbol */
  api_symbol?: string;
  /** coin symbol */
  symbol?: string;
  /** coin market cap rank */
  market_cap_rank?: number;
  /** coin thumb image url */
  thumb?: string;
  /** coin large image url */
  large?: string;
};

export type SearchExchangesItem = {
  /** exchange ID */
  id?: string;
  /** exchange name */
  name?: string;
  /** exchange market type */
  market_type?: string;
  /** exchange thumb image url */
  thumb?: string;
  /** exchange large image url */
  large?: string;
};

export type SearchCategoriesItem = {
  /** category ID */
  id?: string;
  /** category name */
  name?: string;
};

export type SearchNftsItem = {
  /** NFT collection ID */
  id?: string;
  /** NFT name */
  name?: string;
  /** NFT collection symbol */
  symbol?: string;
  /** NFT collection thumb image url */
  thumb?: string;
};

export interface Search {
  coins?: SearchCoinsItem[];
  exchanges?: SearchExchangesItem[];
  icos?: string[];
  categories?: SearchCategoriesItem[];
  nfts?: SearchNftsItem[];
}

/**
 * coin price change percentage in 24 hours
 */
export type TrendingSearchCoinsItemDataPriceChangePercentage24h = {
  btc?: number;
  usd?: number;
};

export type TrendingSearchCoinsItemData = {
  /** coin price in usd */
  price?: number;
  /** coin price in btc */
  price_btc?: string;
  /** coin price change percentage in 24 hours */
  price_change_percentage_24h?: TrendingSearchCoinsItemDataPriceChangePercentage24h;
  /** coin market cap in usd */
  market_cap?: string;
  /** coin market cap in btc */
  market_cap_btc?: string;
  /** coin total volume in usd */
  total_volume?: string;
  /** coin total volume in btc */
  total_volume_btc?: string;
  /** coin sparkline image url */
  sparkline?: string;
  content?: string;
};

export type TrendingSearchCoinsItem = {
  /** coin ID */
  id?: string;
  coin_id?: number;
  /** coin name */
  name?: string;
  /** coin symbol */
  symbol?: string;
  /** coin market cap rank */
  market_cap_rank?: number;
  /** coin thumb image url */
  thumb?: string;
  /** coin small image url */
  small?: string;
  /** coin large image url */
  large?: string;
  /** coin web slug */
  slug?: string;
  /** coin price in btc */
  price_btc?: number;
  /** coin sequence in the list */
  score?: number;
  data?: TrendingSearchCoinsItemData;
};

export type TrendingSearchNftsItemData = {
  /** NFT collection floor price */
  floor_price?: string;
  /** NFT collection floor price in usd 24 hours percentage change */
  floor_price_in_usd_24h_percentage_change?: string;
  /** NFT collection volume in 24 hours */
  h24_volume?: string;
  /** NFT collection 24 hours average sale price */
  h24_average_sale_price?: string;
  /** NFT collection sparkline image url */
  sparkline?: string;
  content?: string;
};

export type TrendingSearchNftsItem = {
  /** NFT collection ID */
  id?: string;
  /** NFT collection name */
  name?: string;
  /** NFT collection symbol */
  symbol?: string;
  /** NFT collection thumb image url */
  thumb?: string;
  nft_contract_id?: number;
  /** NFT collection native currency symbol */
  native_currency_symbol?: string;
  /** NFT collection floor price in native currency */
  floor_price_in_native_currency?: number;
  /** NFT collection floor price 24 hours percentage change */
  floor_price_24h_percentage_change?: number;
  data?: TrendingSearchNftsItemData;
};

/**
 * category market cap change percentage in 24 hours
 */
export type TrendingSearchCategoriesItemDataMarketCapChangePercentage24h = {
  btc?: number;
  usd?: number;
};

export type TrendingSearchCategoriesItemData = {
  /** category market cap */
  market_cap?: number;
  /** category market cap in btc */
  market_cap_btc?: number;
  /** category total volume */
  total_volume?: number;
  /** category total volume in btc */
  total_volume_btc?: number;
  /** category market cap change percentage in 24 hours */
  market_cap_change_percentage_24h?: TrendingSearchCategoriesItemDataMarketCapChangePercentage24h;
  /** category sparkline image url */
  sparkline?: string;
};

export type TrendingSearchCategoriesItem = {
  id?: number;
  /** category name */
  name?: string;
  /** category market cap 1 hour change */
  market_cap_1h_change?: number;
  /** category web slug */
  slug?: string;
  /** category number of coins */
  coins_count?: number;
  data?: TrendingSearchCategoriesItemData;
};

export interface TrendingSearch {
  coins?: TrendingSearchCoinsItem[];
  nfts?: TrendingSearchNftsItem[];
  categories?: TrendingSearchCategoriesItem[];
}

/**
 * cryptocurrencies total market cap
 */
export type GlobalDataTotalMarketCap = {
  btc?: number;
  eth?: number;
};

/**
 * cryptocurrencies total volume
 */
export type GlobalDataTotalVolume = {
  btc?: number;
  eth?: number;
};

/**
 * cryptocurrencies market cap percentage
 */
export type GlobalDataMarketCapPercentage = {
  btc?: number;
  eth?: number;
};

export type GlobalData = {
  /** number of active cryptocurrencies */
  active_cryptocurrencies?: number;
  /** number of upcoming icos */
  upcoming_icos?: number;
  /** number of ongoing icos */
  ongoing_icos?: number;
  /** number of ended icos */
  ended_icos?: number;
  /** number of exchanges */
  markets?: number;
  /** cryptocurrencies total market cap */
  total_market_cap?: GlobalDataTotalMarketCap;
  /** cryptocurrencies total volume */
  total_volume?: GlobalDataTotalVolume;
  /** cryptocurrencies market cap percentage */
  market_cap_percentage?: GlobalDataMarketCapPercentage;
};

export interface Global {
  data?: GlobalData;
  /** cryptocurrencies market cap change percentage in 24 hours in usd */
  market_cap_change_percentage_24h_usd?: number;
  updated_at?: number;
}

export type GlobalDeFiData = {
  /** defi market cap */
  defi_market_cap?: string;
  /** eth market cap */
  eth_market_cap?: string;
  /** defi to eth ratio */
  defi_to_eth_ratio?: string;
  /** defi trading volume in 24 hours */
  trading_volume_24h?: string;
  /** defi dominance */
  defi_dominance?: string;
  /** defi top coin name */
  top_coin_name?: string;
  /** defi top coin dominance */
  top_coin_defi_dominance?: number;
};

export interface GlobalDeFi {
  data?: GlobalDeFiData;
}

export type GlobalMarketCapChartMarketCapChart = {
  market_cap?: number[][];
  volume?: number[][];
};

export interface GlobalMarketCapChart {
  market_cap_chart?: GlobalMarketCapChartMarketCapChart;
}

export type CompaniesTreasuryCompaniesItem = {
  /** company name */
  name?: string;
  /** company symbol */
  symbol?: string;
  /** company incorporated country */
  country?: string;
  /** total btc/eth holdings of company */
  total_holdings?: number;
  /** total entry value in usd */
  total_entry_value_usd?: number;
  /** total current value of btc/eth holdings in usd */
  total_current_value_usd?: number;
  /** percentage of total btc/eth supply */
  percentage_of_total_supply?: number;
};

export interface CompaniesTreasury {
  /** total btc/eth holdings of companies */
  total_holdings?: number;
  /** total btc/eth holdings value in usd */
  total_value_usd?: number;
  /** market cap dominance */
  market_cap_dominance?: number;
  companies?: CompaniesTreasuryCompaniesItem[];
}

export type SimplePriceParams = {
  /**
   * target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currencies: string;
  /**
   * coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list).
   */
  ids?: string;
  /**
   * coins' names, comma-separated if querying more than 1 coin.
   */
  names?: string;
  /**
   * coins' symbols, comma-separated if querying more than 1 coin.
   */
  symbols?: string;
  /**
   * for `symbols` lookups, specify `all` to include all matching tokens <br> Default `top` returns top-ranked tokens (by market cap or volume)
   */
  include_tokens?: SimplePriceIncludeTokens;
  /**
   * include market capitalization, default: false
   */
  include_market_cap?: boolean;
  /**
   * include 24hr volume, default: false
   */
  include_24hr_vol?: boolean;
  /**
   * include 24hr change, default: false
   */
  include_24hr_change?: boolean;
  /**
   * include last updated price time in UNIX, default: false
   */
  include_last_updated_at?: boolean;
  /**
   * decimal place for currency price value
   */
  precision?: SimplePricePrecision;
};

export type SimplePriceIncludeTokens =
  (typeof SimplePriceIncludeTokens)[keyof typeof SimplePriceIncludeTokens];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SimplePriceIncludeTokens = {
  top: "top",
  all: "all",
} as const;

export type SimplePricePrecision =
  (typeof SimplePricePrecision)[keyof typeof SimplePricePrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SimplePricePrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type SimpleTokenPriceParams = {
  /**
   * the contract addresses of tokens, comma-separated if querying more than 1 token's contract address
   */
  contract_addresses: string;
  /**
   * target currency of coins, comma-separated if querying more than 1 currency. <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currencies: string;
  /**
   * include market capitalization, default: false
   */
  include_market_cap?: boolean;
  /**
   * include 24hr volume, default: false
   */
  include_24hr_vol?: boolean;
  /**
   * include 24hr change <br> default: false
   */
  include_24hr_change?: boolean;
  /**
   * include last updated price time in UNIX , default: false
   */
  include_last_updated_at?: boolean;
  /**
   * decimal place for currency price value
   */
  precision?: SimpleTokenPricePrecision;
};

export type SimpleTokenPricePrecision =
  (typeof SimpleTokenPricePrecision)[keyof typeof SimpleTokenPricePrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SimpleTokenPricePrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsListParams = {
  /**
   * include platform and token's contract addresses, default: false
   */
  include_platform?: boolean;
  /**
   * filter by status of coins, default: active
   */
  status?: CoinsListStatus;
};

export type CoinsListStatus =
  (typeof CoinsListStatus)[keyof typeof CoinsListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsListStatus = {
  active: "active",
  inactive: "inactive",
} as const;

export type CoinsTopGainersLosersParams = {
  /**
   * target currency of coins <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * filter result by time range <br> Default value: `24h`
   */
  duration?: CoinsTopGainersLosersDuration;
  /**
   * filter result by market cap ranking (top 300 to 1000) or all coins (including coins that do not have market cap) <br> Default value: `1000`
   */
  top_coins?: CoinsTopGainersLosersTopCoins;
};

export type CoinsTopGainersLosersDuration =
  (typeof CoinsTopGainersLosersDuration)[keyof typeof CoinsTopGainersLosersDuration];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsTopGainersLosersDuration = {
  "1h": "1h",
  "24h": "24h",
  "7d": "7d",
  "14d": "14d",
  "30d": "30d",
  "60d": "60d",
  "1y": "1y",
} as const;

export type CoinsTopGainersLosersTopCoins =
  (typeof CoinsTopGainersLosersTopCoins)[keyof typeof CoinsTopGainersLosersTopCoins];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsTopGainersLosersTopCoins = {
  NUMBER_300: "300",
  NUMBER_500: "500",
  NUMBER_1000: "1000",
  all: "all",
} as const;

export type CoinsMarketsParams = {
  /**
   * target currency of coins and market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * coins' IDs, comma-separated if querying more than 1 coin. <br> *refers to [`/coins/list`](/reference/coins-list).
   */
  ids?: string;
  /**
   * coins' names, comma-separated if querying more than 1 coin.
   */
  names?: string;
  /**
   * coins' symbols, comma-separated if querying more than 1 coin.
   */
  symbols?: string;
  /**
   * for `symbols` lookups, specify `all` to include all matching tokens <br> Default `top` returns top-ranked tokens (by market cap or volume)
   */
  include_tokens?: CoinsMarketsIncludeTokens;
  /**
   * filter based on coins' category <br> *refers to [`/coins/categories/list`](/reference/coins-categories-list).
   */
  category?: string;
  /**
   * sort result by field, default: market_cap_desc
   */
  order?: CoinsMarketsOrder;
  /**
   * total results per page, default: 100 <br> Valid values: 1...250
   */
  per_page?: number;
  /**
   * page through results, default: 1
   */
  page?: number;
  /**
   * include sparkline 7 days data, default: false
   */
  sparkline?: boolean;
  /**
   * include price change percentage timeframe, comma-separated if query more than 1 price change percentage timeframe <br> Valid values: 1h, 24h, 7d, 14d, 30d, 200d, 1y
   */
  price_change_percentage?: string;
  /**
   * language background, default: en
   */
  locale?: CoinsMarketsLocale;
  /**
   * decimal place for currency price value
   */
  precision?: CoinsMarketsPrecision;
};

export type CoinsMarketsIncludeTokens =
  (typeof CoinsMarketsIncludeTokens)[keyof typeof CoinsMarketsIncludeTokens];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsMarketsIncludeTokens = {
  top: "top",
  all: "all",
} as const;

export type CoinsMarketsOrder =
  (typeof CoinsMarketsOrder)[keyof typeof CoinsMarketsOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsMarketsOrder = {
  market_cap_asc: "market_cap_asc",
  market_cap_desc: "market_cap_desc",
  volume_asc: "volume_asc",
  volume_desc: "volume_desc",
  id_asc: "id_asc",
  id_desc: "id_desc",
} as const;

export type CoinsMarketsLocale =
  (typeof CoinsMarketsLocale)[keyof typeof CoinsMarketsLocale];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsMarketsLocale = {
  ar: "ar",
  bg: "bg",
  cs: "cs",
  da: "da",
  de: "de",
  el: "el",
  en: "en",
  es: "es",
  fi: "fi",
  fr: "fr",
  he: "he",
  hi: "hi",
  hr: "hr",
  hu: "hu",
  id: "id",
  it: "it",
  ja: "ja",
  ko: "ko",
  lt: "lt",
  nl: "nl",
  no: "no",
  pl: "pl",
  pt: "pt",
  ro: "ro",
  ru: "ru",
  sk: "sk",
  sl: "sl",
  sv: "sv",
  th: "th",
  tr: "tr",
  uk: "uk",
  vi: "vi",
  zh: "zh",
  "zh-tw": "zh-tw",
} as const;

export type CoinsMarketsPrecision =
  (typeof CoinsMarketsPrecision)[keyof typeof CoinsMarketsPrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsMarketsPrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsIdParams = {
  /**
   * include all the localized languages in the response, default: true
   */
  localization?: boolean;
  /**
   * include tickers data, default: true
   */
  tickers?: boolean;
  /**
   * include market data, default: true
   */
  market_data?: boolean;
  /**
   * include community data, default: true
   */
  community_data?: boolean;
  /**
   * include developer data, default: true
   */
  developer_data?: boolean;
  /**
   * include sparkline 7 days data, default: false
   */
  sparkline?: boolean;
};

export type CoinsIdTickersParams = {
  /**
   * exchange ID <br> *refers to [`/exchanges/list`](/reference/exchanges-list).
   */
  exchange_ids?: string;
  /**
   * include exchange logo, default: false
   */
  include_exchange_logo?: boolean;
  /**
   * page through results
   */
  page?: number;
  /**
   * use this to sort the order of responses, default: trust_score_desc
   */
  order?: CoinsIdTickersOrder;
  /**
   * include 2% orderbook depth, ie. `cost_to_move_up_usd` and `cost_to_move_down_usd` <br> Default: false
   */
  depth?: boolean;
};

export type CoinsIdTickersOrder =
  (typeof CoinsIdTickersOrder)[keyof typeof CoinsIdTickersOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdTickersOrder = {
  trust_score_desc: "trust_score_desc",
  trust_score_asc: "trust_score_asc",
  volume_desc: "volume_desc",
  volume_asc: "volume_asc",
} as const;

export type CoinsIdHistoryParams = {
  /**
   * the date of data snapshot <br> Format: `dd-mm-yyyy`
   */
  date: string;
  /**
   * include all the localized languages in response, default: true
   */
  localization?: boolean;
};

export type CoinsIdMarketChartParams = {
  /**
   * target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * data up to number of days ago <br> You may use any integer or `max` for number of days
   */
  days: string;
  /**
   * data interval, leave empty for auto granularity
   */
  interval?: CoinsIdMarketChartInterval;
  /**
   * decimal place for currency price value
   */
  precision?: CoinsIdMarketChartPrecision;
};

export type CoinsIdMarketChartInterval =
  (typeof CoinsIdMarketChartInterval)[keyof typeof CoinsIdMarketChartInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdMarketChartInterval = {
  "5m": "5m",
  hourly: "hourly",
  daily: "daily",
} as const;

export type CoinsIdMarketChartPrecision =
  (typeof CoinsIdMarketChartPrecision)[keyof typeof CoinsIdMarketChartPrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdMarketChartPrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsIdMarketChartRangeParams = {
  /**
   * target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
  /**
   * data interval, leave empty for auto granularity
   */
  interval?: CoinsIdMarketChartRangeInterval;
  /**
   * decimal place for currency price value
   */
  precision?: CoinsIdMarketChartRangePrecision;
};

export type CoinsIdMarketChartRangeInterval =
  (typeof CoinsIdMarketChartRangeInterval)[keyof typeof CoinsIdMarketChartRangeInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdMarketChartRangeInterval = {
  "5m": "5m",
  hourly: "hourly",
  daily: "daily",
} as const;

export type CoinsIdMarketChartRangePrecision =
  (typeof CoinsIdMarketChartRangePrecision)[keyof typeof CoinsIdMarketChartRangePrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdMarketChartRangePrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsIdOhlcParams = {
  /**
   * target currency of price data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * data up to number of days ago
   */
  days: CoinsIdOhlcDays;
  /**
   * data interval, leave empty for auto granularity
   */
  interval?: CoinsIdOhlcInterval;
  /**
   * decimal place for currency price value
   */
  precision?: CoinsIdOhlcPrecision;
};

export type CoinsIdOhlcDays =
  (typeof CoinsIdOhlcDays)[keyof typeof CoinsIdOhlcDays];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdOhlcDays = {
  NUMBER_1: "1",
  NUMBER_7: "7",
  NUMBER_14: "14",
  NUMBER_30: "30",
  NUMBER_90: "90",
  NUMBER_180: "180",
  NUMBER_365: "365",
  max: "max",
} as const;

export type CoinsIdOhlcInterval =
  (typeof CoinsIdOhlcInterval)[keyof typeof CoinsIdOhlcInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdOhlcInterval = {
  daily: "daily",
  hourly: "hourly",
} as const;

export type CoinsIdOhlcPrecision =
  (typeof CoinsIdOhlcPrecision)[keyof typeof CoinsIdOhlcPrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdOhlcPrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsIdOhlcRangeParams = {
  /**
   * target currency of price data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
  /**
   * data interval
   */
  interval: CoinsIdOhlcRangeInterval;
};

export type CoinsIdOhlcRangeInterval =
  (typeof CoinsIdOhlcRangeInterval)[keyof typeof CoinsIdOhlcRangeInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdOhlcRangeInterval = {
  daily: "daily",
  hourly: "hourly",
} as const;

export type ContractAddressMarketChartParams = {
  /**
   * target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * data up to number of days ago <br> You may use any integer or `max` for number of days
   */
  days: string;
  /**
   * data interval, leave empty for auto granularity
   */
  interval?: ContractAddressMarketChartInterval;
  /**
   * decimal place for currency price value
   */
  precision?: ContractAddressMarketChartPrecision;
};

export type ContractAddressMarketChartInterval =
  (typeof ContractAddressMarketChartInterval)[keyof typeof ContractAddressMarketChartInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractAddressMarketChartInterval = {
  "5m": "5m",
  hourly: "hourly",
  daily: "daily",
} as const;

export type ContractAddressMarketChartPrecision =
  (typeof ContractAddressMarketChartPrecision)[keyof typeof ContractAddressMarketChartPrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractAddressMarketChartPrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type ContractAddressMarketChartRangeParams = {
  /**
   * target currency of market data <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies).
   */
  vs_currency: string;
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
  /**
   * data interval, leave empty for auto granularity
   */
  interval?: ContractAddressMarketChartRangeInterval;
  /**
   * decimal place for currency price value
   */
  precision?: ContractAddressMarketChartRangePrecision;
};

export type ContractAddressMarketChartRangeInterval =
  (typeof ContractAddressMarketChartRangeInterval)[keyof typeof ContractAddressMarketChartRangeInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractAddressMarketChartRangeInterval = {
  "5m": "5m",
  hourly: "hourly",
  daily: "daily",
} as const;

export type ContractAddressMarketChartRangePrecision =
  (typeof ContractAddressMarketChartRangePrecision)[keyof typeof ContractAddressMarketChartRangePrecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContractAddressMarketChartRangePrecision = {
  full: "full",
  NUMBER_0: "0",
  NUMBER_1: "1",
  NUMBER_2: "2",
  NUMBER_3: "3",
  NUMBER_4: "4",
  NUMBER_5: "5",
  NUMBER_6: "6",
  NUMBER_7: "7",
  NUMBER_8: "8",
  NUMBER_9: "9",
  NUMBER_10: "10",
  NUMBER_11: "11",
  NUMBER_12: "12",
  NUMBER_13: "13",
  NUMBER_14: "14",
  NUMBER_15: "15",
  NUMBER_16: "16",
  NUMBER_17: "17",
  NUMBER_18: "18",
} as const;

export type CoinsIdCirculatingSupplyChartParams = {
  /**
   * data up to number of days ago <br> Valid values: any integer or `max`
   */
  days: string;
  /**
   * data interval
   */
  interval?: CoinsIdCirculatingSupplyChartInterval;
};

export type CoinsIdCirculatingSupplyChartInterval =
  (typeof CoinsIdCirculatingSupplyChartInterval)[keyof typeof CoinsIdCirculatingSupplyChartInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdCirculatingSupplyChartInterval = {
  daily: "daily",
} as const;

export type CoinsIdCirculatingSupplyChartRangeParams = {
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
};

export type CoinsIdTotalSupplyChartParams = {
  /**
   * data up to number of days ago <br> Valid values: any integer or `max`
   */
  days: string;
  /**
   * data interval
   */
  interval?: CoinsIdTotalSupplyChartInterval;
};

export type CoinsIdTotalSupplyChartInterval =
  (typeof CoinsIdTotalSupplyChartInterval)[keyof typeof CoinsIdTotalSupplyChartInterval];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsIdTotalSupplyChartInterval = {
  daily: "daily",
} as const;

export type CoinsIdTotalSupplyChartRangeParams = {
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
};

export type AssetPlatformsListParams = {
  /**
   * apply relevant filters to results
   */
  filter?: AssetPlatformsListFilter;
};

export type AssetPlatformsListFilter =
  (typeof AssetPlatformsListFilter)[keyof typeof AssetPlatformsListFilter];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetPlatformsListFilter = {
  nft: "nft",
} as const;

export type CoinsCategoriesParams = {
  /**
   * sort results by field, default: market_cap_desc
   */
  order?: CoinsCategoriesOrder;
};

export type CoinsCategoriesOrder =
  (typeof CoinsCategoriesOrder)[keyof typeof CoinsCategoriesOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CoinsCategoriesOrder = {
  market_cap_desc: "market_cap_desc",
  market_cap_asc: "market_cap_asc",
  name_desc: "name_desc",
  name_asc: "name_asc",
  market_cap_change_24h_desc: "market_cap_change_24h_desc",
  market_cap_change_24h_asc: "market_cap_change_24h_asc",
} as const;

export type ExchangesParams = {
  /**
   * total results per page, default: 100 <br> Valid values: 1...250
   */
  per_page?: number;
  /**
   * page through results, default: 1
   */
  page?: number;
};

export type ExchangesListParams = {
  /**
   * filter by status of exchanges, default: active
   */
  status?: ExchangesListStatus;
};

export type ExchangesListStatus =
  (typeof ExchangesListStatus)[keyof typeof ExchangesListStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExchangesListStatus = {
  active: "active",
  inactive: "inactive",
} as const;

export type ExchangesIdTickersParams = {
  /**
   * filter tickers by coin IDs, comma-separated if querying more than 1 coin <br> *refers to [`/coins/list`](/reference/coins-list).
   */
  coin_ids?: string;
  /**
   * include exchange logo, default: false
   */
  include_exchange_logo?: boolean;
  /**
   * page through results
   */
  page?: number;
  /**
   * include 2% orderbook depth (Example: cost_to_move_up_usd & cost_to_move_down_usd),default: false
   */
  depth?: boolean;
  /**
   * use this to sort the order of responses, default: trust_score_desc
   */
  order?: ExchangesIdTickersOrder;
};

export type ExchangesIdTickersOrder =
  (typeof ExchangesIdTickersOrder)[keyof typeof ExchangesIdTickersOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExchangesIdTickersOrder = {
  trust_score_desc: "trust_score_desc",
  trust_score_asc: "trust_score_asc",
  volume_desc: "volume_desc",
  volume_asc: "volume_asc",
  base_target: "base_target",
} as const;

export type ExchangesIdVolumeChartParams = {
  /**
   * data up to number of days ago
   */
  days: ExchangesIdVolumeChartDays;
};

export type ExchangesIdVolumeChartDays =
  (typeof ExchangesIdVolumeChartDays)[keyof typeof ExchangesIdVolumeChartDays];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ExchangesIdVolumeChartDays = {
  NUMBER_1: "1",
  NUMBER_7: "7",
  NUMBER_14: "14",
  NUMBER_30: "30",
  NUMBER_90: "90",
  NUMBER_180: "180",
  NUMBER_365: "365",
} as const;

export type ExchangesIdVolumeChartRangeParams = {
  /**
   * starting date in UNIX timestamp
   */
  from: number;
  /**
   * ending date in UNIX timestamp
   */
  to: number;
};

export type DerivativesExchangesParams = {
  /**
   * use this to sort the order of responses, default: open_interest_btc_desc
   */
  order?: DerivativesExchangesOrder;
  /**
   * total results per page
   */
  per_page?: number;
  /**
   * page through results, default: 1
   */
  page?: number;
};

export type DerivativesExchangesOrder =
  (typeof DerivativesExchangesOrder)[keyof typeof DerivativesExchangesOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DerivativesExchangesOrder = {
  name_asc: "name_asc",
  name_desc: "name_desc",
  open_interest_btc_asc: "open_interest_btc_asc",
  open_interest_btc_desc: "open_interest_btc_desc",
  trade_volume_24h_btc_asc: "trade_volume_24h_btc_asc",
  trade_volume_24h_btc_desc: "trade_volume_24h_btc_desc",
} as const;

export type DerivativesExchangesIdParams = {
  /**
   * include tickers data
   */
  include_tickers?: DerivativesExchangesIdIncludeTickers;
};

export type DerivativesExchangesIdIncludeTickers =
  (typeof DerivativesExchangesIdIncludeTickers)[keyof typeof DerivativesExchangesIdIncludeTickers];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DerivativesExchangesIdIncludeTickers = {
  all: "all",
  unexpired: "unexpired",
} as const;

export type NftsListParams = {
  /**
   * use this to sort the order of responses
   */
  order?: NftsListOrder;
  /**
   * total results per page <br> Valid values: 1...250
   */
  per_page?: number;
  /**
   * page through results
   */
  page?: number;
};

export type NftsListOrder = (typeof NftsListOrder)[keyof typeof NftsListOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NftsListOrder = {
  h24_volume_usd_asc: "h24_volume_usd_asc",
  h24_volume_usd_desc: "h24_volume_usd_desc",
  h24_volume_native_asc: "h24_volume_native_asc",
  h24_volume_native_desc: "h24_volume_native_desc",
  floor_price_native_asc: "floor_price_native_asc",
  floor_price_native_desc: "floor_price_native_desc",
  market_cap_native_asc: "market_cap_native_asc",
  market_cap_native_desc: "market_cap_native_desc",
  market_cap_usd_asc: "market_cap_usd_asc",
  market_cap_usd_desc: "market_cap_usd_desc",
} as const;

export type NftsMarketsParams = {
  /**
   * filter result by asset platform (blockchain network) <br> *refers to [`/asset_platforms`](/reference/asset-platforms-list) filter=`nft`
   */
  asset_platform_id?: string;
  /**
   * sort results by field <br> Default: `market_cap_usd_desc`
   */
  order?: NftsMarketsOrder;
  /**
   * total results per page <br> Valid values: any integer between 1 and 250 <br> Default: `100`
   */
  per_page?: number;
  /**
   * page through results <br> Default: `1`
   */
  page?: number;
};

export type NftsMarketsOrder =
  (typeof NftsMarketsOrder)[keyof typeof NftsMarketsOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NftsMarketsOrder = {
  h24_volume_native_asc: "h24_volume_native_asc",
  h24_volume_native_desc: "h24_volume_native_desc",
  h24_volume_usd_asc: "h24_volume_usd_asc",
  h24_volume_usd_desc: "h24_volume_usd_desc",
  market_cap_usd_asc: "market_cap_usd_asc",
  market_cap_usd_desc: "market_cap_usd_desc",
} as const;

export type NftsIdMarketChartParams = {
  /**
   * data up to number of days <br> Valid values: any integer or max
   */
  days: string;
};

export type NftsContractAddressMarketChartParams = {
  /**
   * data up to number of days ago <br> Valid values: any integer or max
   */
  days: string;
};

export type SearchDataParams = {
  /**
   * search query
   */
  query: string;
};

export type TrendingSearchParams = {
  /**
   * show max number of results available for the given type <br> Available values: `coins`, `nfts`, `categories` <br> Example: `coins` or `coins,nfts,categories`
   */
  show_max?: string;
};

export type GlobalMarketCapChartParams = {
  /**
   * data up to number of days ago <br> Valid values: any integer
   */
  days: GlobalMarketCapChartDays;
  /**
   * target currency of market cap, default: usd <br> *refers to [`/simple/supported_vs_currencies`](/reference/simple-supported-currencies)
   */
  vs_currency?: string;
};

export type GlobalMarketCapChartDays =
  (typeof GlobalMarketCapChartDays)[keyof typeof GlobalMarketCapChartDays];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GlobalMarketCapChartDays = {
  NUMBER_1: "1",
  NUMBER_7: "7",
  NUMBER_14: "14",
  NUMBER_30: "30",
  NUMBER_90: "90",
  NUMBER_180: "180",
  NUMBER_365: "365",
  max: "max",
} as const;

/**
 * This endpoint allows you to **check the API server status**
 * @summary Check API server status
 */
export type pingServerResponse200 = {
  data: Ping;
  status: 200;
};

export type pingServerResponseComposite = pingServerResponse200;

export type pingServerResponse = pingServerResponseComposite & {
  headers: Headers;
};

export const getPingServerUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/ping`;
};

export const pingServer = async (
  options?: RequestInit,
): Promise<pingServerResponse> => {
  return request<pingServerResponse>(getPingServerUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **monitor your account's API usage, including rate limits, monthly total credits, remaining credits, and more**
 * @summary üíº API Usage
 */
export type apiUsageResponse200 = {
  data: Key;
  status: 200;
};

export type apiUsageResponseComposite = apiUsageResponse200;

export type apiUsageResponse = apiUsageResponseComposite & {
  headers: Headers;
};

export const getApiUsageUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/key`;
};

export const apiUsage = async (
  options?: RequestInit,
): Promise<apiUsageResponse> => {
  return request<apiUsageResponse>(getApiUsageUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query the prices of one or more coins by using their unique Coin API IDs**
 * @summary Coin Price by IDs
 */
export type simplePriceResponse200 = {
  data: SimplePrice;
  status: 200;
};

export type simplePriceResponseComposite = simplePriceResponse200;

export type simplePriceResponse = simplePriceResponseComposite & {
  headers: Headers;
};

export const getSimplePriceUrl = (params: SimplePriceParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/simple/price?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/simple/price`;
};

export const simplePrice = async (
  params: SimplePriceParams,
  options?: RequestInit,
): Promise<simplePriceResponse> => {
  return request<simplePriceResponse>(getSimplePriceUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query a token price by using token contract address**
 * @summary Coin Price by Token Addresses
 */
export type simpleTokenPriceResponse200 = {
  data: SimpleTokenPrice;
  status: 200;
};

export type simpleTokenPriceResponseComposite = simpleTokenPriceResponse200;

export type simpleTokenPriceResponse = simpleTokenPriceResponseComposite & {
  headers: Headers;
};

export const getSimpleTokenPriceUrl = (
  id: string,
  params: SimpleTokenPriceParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/simple/token_price/${id}?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/simple/token_price/${id}`;
};

export const simpleTokenPrice = async (
  id: string,
  params: SimpleTokenPriceParams,
  options?: RequestInit,
): Promise<simpleTokenPriceResponse> => {
  return request<simpleTokenPriceResponse>(getSimpleTokenPriceUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the supported currencies on CoinGecko**
 * @summary Supported Currencies List
 */
export type simpleSupportedCurrenciesResponse200 = {
  data: CurrencyList;
  status: 200;
};

export type simpleSupportedCurrenciesResponseComposite =
  simpleSupportedCurrenciesResponse200;

export type simpleSupportedCurrenciesResponse =
  simpleSupportedCurrenciesResponseComposite & {
    headers: Headers;
  };

export const getSimpleSupportedCurrenciesUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/simple/supported_vs_currencies`;
};

export const simpleSupportedCurrencies = async (
  options?: RequestInit,
): Promise<simpleSupportedCurrenciesResponse> => {
  return request<simpleSupportedCurrenciesResponse>(
    getSimpleSupportedCurrenciesUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all the supported coins on CoinGecko with coins ID, name and symbol**
 * @summary Coins List (ID Map)
 */
export type coinsListResponse200 = {
  data: CoinsList;
  status: 200;
};

export type coinsListResponseComposite = coinsListResponse200;

export type coinsListResponse = coinsListResponseComposite & {
  headers: Headers;
};

export const getCoinsListUrl = (params?: CoinsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/list?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/list`;
};

export const coinsList = async (
  params?: CoinsListParams,
  options?: RequestInit,
): Promise<coinsListResponse> => {
  return request<coinsListResponse>(getCoinsListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query the top 30 coins with largest price gain and loss by a specific time duration**
 * @summary üíº Top Gainers & Losers
 */
export type coinsTopGainersLosersResponse200 = {
  data: TopGainersLosers;
  status: 200;
};

export type coinsTopGainersLosersResponseComposite =
  coinsTopGainersLosersResponse200;

export type coinsTopGainersLosersResponse =
  coinsTopGainersLosersResponseComposite & {
    headers: Headers;
  };

export const getCoinsTopGainersLosersUrl = (
  params: CoinsTopGainersLosersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/top_gainers_losers?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/top_gainers_losers`;
};

export const coinsTopGainersLosers = async (
  params: CoinsTopGainersLosersParams,
  options?: RequestInit,
): Promise<coinsTopGainersLosersResponse> => {
  return request<coinsTopGainersLosersResponse>(
    getCoinsTopGainersLosersUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query the latest 200 coins that recently listed on CoinGecko**
 * @summary üíº Recently Added Coins
 */
export type coinsListNewResponse200 = {
  data: CoinsListNew;
  status: 200;
};

export type coinsListNewResponseComposite = coinsListNewResponse200;

export type coinsListNewResponse = coinsListNewResponseComposite & {
  headers: Headers;
};

export const getCoinsListNewUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/coins/list/new`;
};

export const coinsListNew = async (
  options?: RequestInit,
): Promise<coinsListNewResponse> => {
  return request<coinsListNewResponse>(getCoinsListNewUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the supported coins with price, market cap, volume and market related data**
 * @summary Coins List with Market Data
 */
export type coinsMarketsResponse200 = {
  data: CoinsMarkets;
  status: 200;
};

export type coinsMarketsResponseComposite = coinsMarketsResponse200;

export type coinsMarketsResponse = coinsMarketsResponseComposite & {
  headers: Headers;
};

export const getCoinsMarketsUrl = (params: CoinsMarketsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/markets?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/markets`;
};

export const coinsMarkets = async (
  params: CoinsMarketsParams,
  options?: RequestInit,
): Promise<coinsMarketsResponse> => {
  return request<coinsMarketsResponse>(getCoinsMarketsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the metadata (image, websites, socials, description, contract address, etc.) and market data (price, ATH, exchange tickers, etc.) of a coin from the CoinGecko coin page based on a particular coin ID**
 * @summary Coin Data by ID
 */
export type coinsIdResponse200 = {
  data: CoinsID;
  status: 200;
};

export type coinsIdResponseComposite = coinsIdResponse200;

export type coinsIdResponse = coinsIdResponseComposite & {
  headers: Headers;
};

export const getCoinsIdUrl = (id: string, params?: CoinsIdParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}`;
};

export const coinsId = async (
  id: string,
  params?: CoinsIdParams,
  options?: RequestInit,
): Promise<coinsIdResponse> => {
  return request<coinsIdResponse>(getCoinsIdUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query the coin tickers on both centralized exchange (CEX) and decentralized exchange (DEX) based on a particular coin ID**
 * @summary Coin Tickers by ID
 */
export type coinsIdTickersResponse200 = {
  data: CoinsTickers;
  status: 200;
};

export type coinsIdTickersResponseComposite = coinsIdTickersResponse200;

export type coinsIdTickersResponse = coinsIdTickersResponseComposite & {
  headers: Headers;
};

export const getCoinsIdTickersUrl = (
  id: string,
  params?: CoinsIdTickersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/tickers?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/tickers`;
};

export const coinsIdTickers = async (
  id: string,
  params?: CoinsIdTickersParams,
  options?: RequestInit,
): Promise<coinsIdTickersResponse> => {
  return request<coinsIdTickersResponse>(getCoinsIdTickersUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query the historical data (price, market cap, 24hrs volume, ...) at a given date for a coin based on a particular coin ID**
 * @summary Coin Historical Data by ID
 */
export type coinsIdHistoryResponse200 = {
  data: CoinsHistoricalData;
  status: 200;
};

export type coinsIdHistoryResponseComposite = coinsIdHistoryResponse200;

export type coinsIdHistoryResponse = coinsIdHistoryResponseComposite & {
  headers: Headers;
};

export const getCoinsIdHistoryUrl = (
  id: string,
  params: CoinsIdHistoryParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/history?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/history`;
};

export const coinsIdHistory = async (
  id: string,
  params: CoinsIdHistoryParams,
  options?: RequestInit,
): Promise<coinsIdHistoryResponse> => {
  return request<coinsIdHistoryResponse>(getCoinsIdHistoryUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **get the historical chart data of a coin including time in UNIX, price, market cap and 24hr volume based on particular coin ID**
 * @summary Coin Historical Chart Data by ID
 */
export type coinsIdMarketChartResponse200 = {
  data: CoinsMarketChart;
  status: 200;
};

export type coinsIdMarketChartResponseComposite = coinsIdMarketChartResponse200;

export type coinsIdMarketChartResponse = coinsIdMarketChartResponseComposite & {
  headers: Headers;
};

export const getCoinsIdMarketChartUrl = (
  id: string,
  params: CoinsIdMarketChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/market_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/market_chart`;
};

export const coinsIdMarketChart = async (
  id: string,
  params: CoinsIdMarketChartParams,
  options?: RequestInit,
): Promise<coinsIdMarketChartResponse> => {
  return request<coinsIdMarketChartResponse>(
    getCoinsIdMarketChartUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **get the historical chart data of a coin within certain time range in UNIX along with price, market cap and 24hr volume based on particular coin ID**
 * @summary Coin Historical Chart Data within Time Range by ID
 */
export type coinsIdMarketChartRangeResponse200 = {
  data: CoinsMarketChartRange;
  status: 200;
};

export type coinsIdMarketChartRangeResponseComposite =
  coinsIdMarketChartRangeResponse200;

export type coinsIdMarketChartRangeResponse =
  coinsIdMarketChartRangeResponseComposite & {
    headers: Headers;
  };

export const getCoinsIdMarketChartRangeUrl = (
  id: string,
  params: CoinsIdMarketChartRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/market_chart/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/market_chart/range`;
};

export const coinsIdMarketChartRange = async (
  id: string,
  params: CoinsIdMarketChartRangeParams,
  options?: RequestInit,
): Promise<coinsIdMarketChartRangeResponse> => {
  return request<coinsIdMarketChartRangeResponse>(
    getCoinsIdMarketChartRangeUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin based on particular coin ID**
 * @summary Coin OHLC Chart by ID
 */
export type coinsIdOhlcResponse200 = {
  data: CoinsOHLC;
  status: 200;
};

export type coinsIdOhlcResponseComposite = coinsIdOhlcResponse200;

export type coinsIdOhlcResponse = coinsIdOhlcResponseComposite & {
  headers: Headers;
};

export const getCoinsIdOhlcUrl = (id: string, params: CoinsIdOhlcParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/ohlc?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/ohlc`;
};

export const coinsIdOhlc = async (
  id: string,
  params: CoinsIdOhlcParams,
  options?: RequestInit,
): Promise<coinsIdOhlcResponse> => {
  return request<coinsIdOhlcResponse>(getCoinsIdOhlcUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **get the OHLC chart (Open, High, Low, Close) of a coin within a range of timestamp based on particular coin ID**
 * @summary üíº Coin OHLC Chart within Time Range by ID
 */
export type coinsIdOhlcRangeResponse200 = {
  data: CoinsOHLC;
  status: 200;
};

export type coinsIdOhlcRangeResponseComposite = coinsIdOhlcRangeResponse200;

export type coinsIdOhlcRangeResponse = coinsIdOhlcRangeResponseComposite & {
  headers: Headers;
};

export const getCoinsIdOhlcRangeUrl = (
  id: string,
  params: CoinsIdOhlcRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/ohlc/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/ohlc/range`;
};

export const coinsIdOhlcRange = async (
  id: string,
  params: CoinsIdOhlcRangeParams,
  options?: RequestInit,
): Promise<coinsIdOhlcRangeResponse> => {
  return request<coinsIdOhlcRangeResponse>(getCoinsIdOhlcRangeUrl(id, params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the metadata (image, websites, socials, description, contract address, etc.) and market data (price, ATH, exchange tickers, etc.) of a coin from the CoinGecko coin page based on an asset platform and a particular token contract address**
 * @summary Coin Data by Token Address
 */
export type coinsContractAddressResponse200 = {
  data: CoinsContractAddress;
  status: 200;
};

export type coinsContractAddressResponseComposite =
  coinsContractAddressResponse200;

export type coinsContractAddressResponse =
  coinsContractAddressResponseComposite & {
    headers: Headers;
  };

export const getCoinsContractAddressUrl = (
  id: string,
  contractAddress: string,
) => {
  return `https://pro-api.coingecko.com/api/v3/coins/${id}/contract/${contractAddress}`;
};

export const coinsContractAddress = async (
  id: string,
  contractAddress: string,
  options?: RequestInit,
): Promise<coinsContractAddressResponse> => {
  return request<coinsContractAddressResponse>(
    getCoinsContractAddressUrl(id, contractAddress),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **get the historical chart data including time in UNIX, price, market cap and 24hr volume based on asset platform and particular token contract address**
 * @summary Coin Historical Chart Data by Token Address
 */
export type contractAddressMarketChartResponse200 = {
  data: CoinsMarketChart;
  status: 200;
};

export type contractAddressMarketChartResponseComposite =
  contractAddressMarketChartResponse200;

export type contractAddressMarketChartResponse =
  contractAddressMarketChartResponseComposite & {
    headers: Headers;
  };

export const getContractAddressMarketChartUrl = (
  id: string,
  contractAddress: string,
  params: ContractAddressMarketChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/contract/${contractAddress}/market_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/contract/${contractAddress}/market_chart`;
};

export const contractAddressMarketChart = async (
  id: string,
  contractAddress: string,
  params: ContractAddressMarketChartParams,
  options?: RequestInit,
): Promise<contractAddressMarketChartResponse> => {
  return request<contractAddressMarketChartResponse>(
    getContractAddressMarketChartUrl(id, contractAddress, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **get the historical chart data within certain time range in UNIX along with price, market cap and 24hr volume based on asset platform and particular token contract address**
 * @summary Coin Historical Chart Data within Time Range by Token Address
 */
export type contractAddressMarketChartRangeResponse200 = {
  data: CoinsMarketChartRange;
  status: 200;
};

export type contractAddressMarketChartRangeResponseComposite =
  contractAddressMarketChartRangeResponse200;

export type contractAddressMarketChartRangeResponse =
  contractAddressMarketChartRangeResponseComposite & {
    headers: Headers;
  };

export const getContractAddressMarketChartRangeUrl = (
  id: string,
  contractAddress: string,
  params: ContractAddressMarketChartRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/contract/${contractAddress}/market_chart/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/contract/${contractAddress}/market_chart/range`;
};

export const contractAddressMarketChartRange = async (
  id: string,
  contractAddress: string,
  params: ContractAddressMarketChartRangeParams,
  options?: RequestInit,
): Promise<contractAddressMarketChartRangeResponse> => {
  return request<contractAddressMarketChartRangeResponse>(
    getContractAddressMarketChartRangeUrl(id, contractAddress, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query historical circulating supply of a coin by number of days away from now based on provided coin ID**
 * @summary üëë Circulating Supply Chart by ID
 */
export type coinsIdCirculatingSupplyChartResponse200 = {
  data: CirculatingSupplyChartBase;
  status: 200;
};

export type coinsIdCirculatingSupplyChartResponseComposite =
  coinsIdCirculatingSupplyChartResponse200;

export type coinsIdCirculatingSupplyChartResponse =
  coinsIdCirculatingSupplyChartResponseComposite & {
    headers: Headers;
  };

export const getCoinsIdCirculatingSupplyChartUrl = (
  id: string,
  params: CoinsIdCirculatingSupplyChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/circulating_supply_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/circulating_supply_chart`;
};

export const coinsIdCirculatingSupplyChart = async (
  id: string,
  params: CoinsIdCirculatingSupplyChartParams,
  options?: RequestInit,
): Promise<coinsIdCirculatingSupplyChartResponse> => {
  return request<coinsIdCirculatingSupplyChartResponse>(
    getCoinsIdCirculatingSupplyChartUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query historical circulating supply of a coin, within a range of timestamp based on the provided coin ID**
 * @summary üëë Circulating Supply Chart within Time Range by ID
 */
export type coinsIdCirculatingSupplyChartRangeResponse200 = {
  data: CirculatingSupplyChartBase;
  status: 200;
};

export type coinsIdCirculatingSupplyChartRangeResponseComposite =
  coinsIdCirculatingSupplyChartRangeResponse200;

export type coinsIdCirculatingSupplyChartRangeResponse =
  coinsIdCirculatingSupplyChartRangeResponseComposite & {
    headers: Headers;
  };

export const getCoinsIdCirculatingSupplyChartRangeUrl = (
  id: string,
  params: CoinsIdCirculatingSupplyChartRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/circulating_supply_chart/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/circulating_supply_chart/range`;
};

export const coinsIdCirculatingSupplyChartRange = async (
  id: string,
  params: CoinsIdCirculatingSupplyChartRangeParams,
  options?: RequestInit,
): Promise<coinsIdCirculatingSupplyChartRangeResponse> => {
  return request<coinsIdCirculatingSupplyChartRangeResponse>(
    getCoinsIdCirculatingSupplyChartRangeUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query historical total supply of a coin by number of days away from now based on provided coin ID**
 * @summary üëë Total Supply Chart by ID
 */
export type coinsIdTotalSupplyChartResponse200 = {
  data: TotalSupplyChartBase;
  status: 200;
};

export type coinsIdTotalSupplyChartResponseComposite =
  coinsIdTotalSupplyChartResponse200;

export type coinsIdTotalSupplyChartResponse =
  coinsIdTotalSupplyChartResponseComposite & {
    headers: Headers;
  };

export const getCoinsIdTotalSupplyChartUrl = (
  id: string,
  params: CoinsIdTotalSupplyChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/total_supply_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/total_supply_chart`;
};

export const coinsIdTotalSupplyChart = async (
  id: string,
  params: CoinsIdTotalSupplyChartParams,
  options?: RequestInit,
): Promise<coinsIdTotalSupplyChartResponse> => {
  return request<coinsIdTotalSupplyChartResponse>(
    getCoinsIdTotalSupplyChartUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query historical total supply of a coin, within a range of timestamp based on the provided coin ID**
 * @summary üëë Total Supply Chart within time range by ID
 */
export type coinsIdTotalSupplyChartRangeResponse200 = {
  data: TotalSupplyChartBase;
  status: 200;
};

export type coinsIdTotalSupplyChartRangeResponseComposite =
  coinsIdTotalSupplyChartRangeResponse200;

export type coinsIdTotalSupplyChartRangeResponse =
  coinsIdTotalSupplyChartRangeResponseComposite & {
    headers: Headers;
  };

export const getCoinsIdTotalSupplyChartRangeUrl = (
  id: string,
  params: CoinsIdTotalSupplyChartRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/${id}/total_supply_chart/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/${id}/total_supply_chart/range`;
};

export const coinsIdTotalSupplyChartRange = async (
  id: string,
  params: CoinsIdTotalSupplyChartRangeParams,
  options?: RequestInit,
): Promise<coinsIdTotalSupplyChartRangeResponse> => {
  return request<coinsIdTotalSupplyChartRangeResponse>(
    getCoinsIdTotalSupplyChartRangeUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all the asset platforms on CoinGecko**
 * @summary Asset Platforms List (ID Map)
 */
export type assetPlatformsListResponse200 = {
  data: AssetPlatforms;
  status: 200;
};

export type assetPlatformsListResponseComposite = assetPlatformsListResponse200;

export type assetPlatformsListResponse = assetPlatformsListResponseComposite & {
  headers: Headers;
};

export const getAssetPlatformsListUrl = (params?: AssetPlatformsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/asset_platforms?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/asset_platforms`;
};

export const assetPlatformsList = async (
  params?: AssetPlatformsListParams,
  options?: RequestInit,
): Promise<assetPlatformsListResponse> => {
  return request<assetPlatformsListResponse>(getAssetPlatformsListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **get full list of tokens of a blockchain network (asset platform) that is supported by [Ethereum token list standard](https://tokenlists.org/)**
 * @summary üëë Token Lists by Asset Platform ID
 */
export type tokenListsResponse200 = {
  data: TokenLists;
  status: 200;
};

export type tokenListsResponseComposite = tokenListsResponse200;

export type tokenListsResponse = tokenListsResponseComposite & {
  headers: Headers;
};

export const getTokenListsUrl = (assetPlatformId: string) => {
  return `https://pro-api.coingecko.com/api/v3/token_lists/${assetPlatformId}/all.json`;
};

export const tokenLists = async (
  assetPlatformId: string,
  options?: RequestInit,
): Promise<tokenListsResponse> => {
  return request<tokenListsResponse>(getTokenListsUrl(assetPlatformId), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the coins categories on CoinGecko**
 * @summary Coins Categories List (ID Map)
 */
export type coinsCategoriesListResponse200 = {
  data: CategoriesList;
  status: 200;
};

export type coinsCategoriesListResponseComposite =
  coinsCategoriesListResponse200;

export type coinsCategoriesListResponse =
  coinsCategoriesListResponseComposite & {
    headers: Headers;
  };

export const getCoinsCategoriesListUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/coins/categories/list`;
};

export const coinsCategoriesList = async (
  options?: RequestInit,
): Promise<coinsCategoriesListResponse> => {
  return request<coinsCategoriesListResponse>(getCoinsCategoriesListUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the coins categories with market data (market cap, volume, ...) on CoinGecko**
 * @summary Coins Categories List with Market Data
 */
export type coinsCategoriesResponse200 = {
  data: Categories;
  status: 200;
};

export type coinsCategoriesResponseComposite = coinsCategoriesResponse200;

export type coinsCategoriesResponse = coinsCategoriesResponseComposite & {
  headers: Headers;
};

export const getCoinsCategoriesUrl = (params?: CoinsCategoriesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/coins/categories?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/coins/categories`;
};

export const coinsCategories = async (
  params?: CoinsCategoriesParams,
  options?: RequestInit,
): Promise<coinsCategoriesResponse> => {
  return request<coinsCategoriesResponse>(getCoinsCategoriesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the supported exchanges with exchanges‚Äô data (ID, name, country, ...) that have active trading volumes on CoinGecko**
 * @summary Exchanges List with data
 */
export type exchangesResponse200 = {
  data: Exchanges;
  status: 200;
};

export type exchangesResponseComposite = exchangesResponse200;

export type exchangesResponse = exchangesResponseComposite & {
  headers: Headers;
};

export const getExchangesUrl = (params?: ExchangesParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/exchanges?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/exchanges`;
};

export const exchanges = async (
  params?: ExchangesParams,
  options?: RequestInit,
): Promise<exchangesResponse> => {
  return request<exchangesResponse>(getExchangesUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the exchanges with ID and name**
 * @summary Exchanges List (ID Map)
 */
export type exchangesListResponse200 = {
  data: ExchangesList;
  status: 200;
};

export type exchangesListResponseComposite = exchangesListResponse200;

export type exchangesListResponse = exchangesListResponseComposite & {
  headers: Headers;
};

export const getExchangesListUrl = (params?: ExchangesListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/exchanges/list?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/exchanges/list`;
};

export const exchangesList = async (
  params?: ExchangesListParams,
  options?: RequestInit,
): Promise<exchangesListResponse> => {
  return request<exchangesListResponse>(getExchangesListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query exchange‚Äôs data (name, year established, country, ...), exchange volume in BTC and top 100 tickers based on exchange‚Äôs ID**
 * @summary Exchange Data by ID
 */
export type exchangesIdResponse200 = {
  data: ExchangeData;
  status: 200;
};

export type exchangesIdResponseComposite = exchangesIdResponse200;

export type exchangesIdResponse = exchangesIdResponseComposite & {
  headers: Headers;
};

export const getExchangesIdUrl = (id: string) => {
  return `https://pro-api.coingecko.com/api/v3/exchanges/${id}`;
};

export const exchangesId = async (
  id: string,
  options?: RequestInit,
): Promise<exchangesIdResponse> => {
  return request<exchangesIdResponse>(getExchangesIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query exchange's tickers based on exchange‚Äôs ID**
 * @summary Exchange Tickers by ID
 */
export type exchangesIdTickersResponse200 = {
  data: ExchangeTickers;
  status: 200;
};

export type exchangesIdTickersResponseComposite = exchangesIdTickersResponse200;

export type exchangesIdTickersResponse = exchangesIdTickersResponseComposite & {
  headers: Headers;
};

export const getExchangesIdTickersUrl = (
  id: string,
  params?: ExchangesIdTickersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/exchanges/${id}/tickers?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/exchanges/${id}/tickers`;
};

export const exchangesIdTickers = async (
  id: string,
  params?: ExchangesIdTickersParams,
  options?: RequestInit,
): Promise<exchangesIdTickersResponse> => {
  return request<exchangesIdTickersResponse>(
    getExchangesIdTickersUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query the historical volume chart data with time in UNIX and trading volume data in BTC based on exchange‚Äôs ID**
 * @summary Exchange Volume Chart by ID
 */
export type exchangesIdVolumeChartResponse200 = {
  data: ExchangeVolumeChart;
  status: 200;
};

export type exchangesIdVolumeChartResponseComposite =
  exchangesIdVolumeChartResponse200;

export type exchangesIdVolumeChartResponse =
  exchangesIdVolumeChartResponseComposite & {
    headers: Headers;
  };

export const getExchangesIdVolumeChartUrl = (
  id: string,
  params: ExchangesIdVolumeChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/exchanges/${id}/volume_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/exchanges/${id}/volume_chart`;
};

export const exchangesIdVolumeChart = async (
  id: string,
  params: ExchangesIdVolumeChartParams,
  options?: RequestInit,
): Promise<exchangesIdVolumeChartResponse> => {
  return request<exchangesIdVolumeChartResponse>(
    getExchangesIdVolumeChartUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query the historical volume chart data in BTC by specifying date range in UNIX based on exchange‚Äôs ID**
 * @summary üíº Exchange Volume Chart within Time Range by ID
 */
export type exchangesIdVolumeChartRangeResponse200 = {
  data: ExchangeVolumeChart;
  status: 200;
};

export type exchangesIdVolumeChartRangeResponseComposite =
  exchangesIdVolumeChartRangeResponse200;

export type exchangesIdVolumeChartRangeResponse =
  exchangesIdVolumeChartRangeResponseComposite & {
    headers: Headers;
  };

export const getExchangesIdVolumeChartRangeUrl = (
  id: string,
  params: ExchangesIdVolumeChartRangeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/exchanges/${id}/volume_chart/range?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/exchanges/${id}/volume_chart/range`;
};

export const exchangesIdVolumeChartRange = async (
  id: string,
  params: ExchangesIdVolumeChartRangeParams,
  options?: RequestInit,
): Promise<exchangesIdVolumeChartRangeResponse> => {
  return request<exchangesIdVolumeChartRangeResponse>(
    getExchangesIdVolumeChartRangeUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all the tickers from derivatives exchanges on CoinGecko**
 * @summary Derivatives Tickers List
 */
export type derivativesTickersResponse200 = {
  data: DerivativesTickersList;
  status: 200;
};

export type derivativesTickersResponseComposite = derivativesTickersResponse200;

export type derivativesTickersResponse = derivativesTickersResponseComposite & {
  headers: Headers;
};

export const getDerivativesTickersUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/derivatives`;
};

export const derivativesTickers = async (
  options?: RequestInit,
): Promise<derivativesTickersResponse> => {
  return request<derivativesTickersResponse>(getDerivativesTickersUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the derivatives exchanges with related data (ID, name, open interest, ...) on CoinGecko**
 * @summary Derivatives Exchanges List with Data
 */
export type derivativesExchangesResponse200 = {
  data: DerivativesExchanges;
  status: 200;
};

export type derivativesExchangesResponseComposite =
  derivativesExchangesResponse200;

export type derivativesExchangesResponse =
  derivativesExchangesResponseComposite & {
    headers: Headers;
  };

export const getDerivativesExchangesUrl = (
  params?: DerivativesExchangesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/derivatives/exchanges?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/derivatives/exchanges`;
};

export const derivativesExchanges = async (
  params?: DerivativesExchangesParams,
  options?: RequestInit,
): Promise<derivativesExchangesResponse> => {
  return request<derivativesExchangesResponse>(
    getDerivativesExchangesUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query the derivatives exchange‚Äôs related data (ID, name, open interest, ...) based on the exchanges‚Äô ID**
 * @summary Derivatives Exchange Data by ID
 */
export type derivativesExchangesIdResponse200 = {
  data: DerivativesExchangesID;
  status: 200;
};

export type derivativesExchangesIdResponseComposite =
  derivativesExchangesIdResponse200;

export type derivativesExchangesIdResponse =
  derivativesExchangesIdResponseComposite & {
    headers: Headers;
  };

export const getDerivativesExchangesIdUrl = (
  id: string,
  params?: DerivativesExchangesIdParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/derivatives/exchanges/${id}?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/derivatives/exchanges/${id}`;
};

export const derivativesExchangesId = async (
  id: string,
  params?: DerivativesExchangesIdParams,
  options?: RequestInit,
): Promise<derivativesExchangesIdResponse> => {
  return request<derivativesExchangesIdResponse>(
    getDerivativesExchangesIdUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all the derivatives exchanges with ID and name on CoinGecko**
 * @summary Derivatives Exchanges List (ID Map)
 */
export type derivativesExchangesListResponse200 = {
  data: DerivativesExchangesList;
  status: 200;
};

export type derivativesExchangesListResponseComposite =
  derivativesExchangesListResponse200;

export type derivativesExchangesListResponse =
  derivativesExchangesListResponseComposite & {
    headers: Headers;
  };

export const getDerivativesExchangesListUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/derivatives/exchanges/list`;
};

export const derivativesExchangesList = async (
  options?: RequestInit,
): Promise<derivativesExchangesListResponse> => {
  return request<derivativesExchangesListResponse>(
    getDerivativesExchangesListUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all supported NFTs with ID, contract address, name, asset platform ID and symbol on CoinGecko**
 * @summary NFTs List (ID Map)
 */
export type nftsListResponse200 = {
  data: NFTList;
  status: 200;
};

export type nftsListResponseComposite = nftsListResponse200;

export type nftsListResponse = nftsListResponseComposite & {
  headers: Headers;
};

export const getNftsListUrl = (params?: NftsListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/nfts/list?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/nfts/list`;
};

export const nftsList = async (
  params?: NftsListParams,
  options?: RequestInit,
): Promise<nftsListResponse> => {
  return request<nftsListResponse>(getNftsListUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the NFT data (name, floor price, 24hr volume ...) based on the NFT collection ID**
 * @summary NFTs Collection Data by ID
 */
export type nftsIdResponse200 = {
  data: NFTData;
  status: 200;
};

export type nftsIdResponseComposite = nftsIdResponse200;

export type nftsIdResponse = nftsIdResponseComposite & {
  headers: Headers;
};

export const getNftsIdUrl = (id: string) => {
  return `https://pro-api.coingecko.com/api/v3/nfts/${id}`;
};

export const nftsId = async (
  id: string,
  options?: RequestInit,
): Promise<nftsIdResponse> => {
  return request<nftsIdResponse>(getNftsIdUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query all the NFT data (name, floor price, 24hr volume ...) based on the NFT collection contract address and respective asset platform**
 * @summary NFTs Collection Data by Contract Address
 */
export type nftsContractAddressResponse200 = {
  data: NFTData;
  status: 200;
};

export type nftsContractAddressResponseComposite =
  nftsContractAddressResponse200;

export type nftsContractAddressResponse =
  nftsContractAddressResponseComposite & {
    headers: Headers;
  };

export const getNftsContractAddressUrl = (
  assetPlatformId: string,
  contractAddress: string,
) => {
  return `https://pro-api.coingecko.com/api/v3/nfts/${assetPlatformId}/contract/${contractAddress}`;
};

export const nftsContractAddress = async (
  assetPlatformId: string,
  contractAddress: string,
  options?: RequestInit,
): Promise<nftsContractAddressResponse> => {
  return request<nftsContractAddressResponse>(
    getNftsContractAddressUrl(assetPlatformId, contractAddress),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query all the supported NFT collections with floor price, market cap, volume and market related data on CoinGecko**
 * @summary üíº NFTs List with Market Data
 */
export type nftsMarketsResponse200 = {
  data: NFTsMarkets;
  status: 200;
};

export type nftsMarketsResponseComposite = nftsMarketsResponse200;

export type nftsMarketsResponse = nftsMarketsResponseComposite & {
  headers: Headers;
};

export const getNftsMarketsUrl = (params?: NftsMarketsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/nfts/markets?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/nfts/markets`;
};

export const nftsMarkets = async (
  params?: NftsMarketsParams,
  options?: RequestInit,
): Promise<nftsMarketsResponse> => {
  return request<nftsMarketsResponse>(getNftsMarketsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you **query historical market data of a NFT collection, including floor price, market cap, and 24hr volume, by number of days away from now**
 * @summary üíº NFTs Collection Historical Chart Data by ID
 */
export type nftsIdMarketChartResponse200 = {
  data: NFTMarketChart;
  status: 200;
};

export type nftsIdMarketChartResponseComposite = nftsIdMarketChartResponse200;

export type nftsIdMarketChartResponse = nftsIdMarketChartResponseComposite & {
  headers: Headers;
};

export const getNftsIdMarketChartUrl = (
  id: string,
  params: NftsIdMarketChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/nfts/${id}/market_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/nfts/${id}/market_chart`;
};

export const nftsIdMarketChart = async (
  id: string,
  params: NftsIdMarketChartParams,
  options?: RequestInit,
): Promise<nftsIdMarketChartResponse> => {
  return request<nftsIdMarketChartResponse>(
    getNftsIdMarketChartUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you **query historical market data of a NFT collection, including floor price, market cap, and 24hr volume, by number of days away from now based on the provided contract address**
 * @summary üíº NFTs Collection Historical Chart Data by Contract Address
 */
export type nftsContractAddressMarketChartResponse200 = {
  data: NFTMarketChart;
  status: 200;
};

export type nftsContractAddressMarketChartResponseComposite =
  nftsContractAddressMarketChartResponse200;

export type nftsContractAddressMarketChartResponse =
  nftsContractAddressMarketChartResponseComposite & {
    headers: Headers;
  };

export const getNftsContractAddressMarketChartUrl = (
  assetPlatformId: string,
  contractAddress: string,
  params: NftsContractAddressMarketChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/nfts/${assetPlatformId}/contract/${contractAddress}/market_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/nfts/${assetPlatformId}/contract/${contractAddress}/market_chart`;
};

export const nftsContractAddressMarketChart = async (
  assetPlatformId: string,
  contractAddress: string,
  params: NftsContractAddressMarketChartParams,
  options?: RequestInit,
): Promise<nftsContractAddressMarketChartResponse> => {
  return request<nftsContractAddressMarketChartResponse>(
    getNftsContractAddressMarketChartUrl(
      assetPlatformId,
      contractAddress,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you to **query the latest floor price and 24hr volume of a NFT collection, on each NFT marketplace, e.g. OpenSea and LooksRare**
 * @summary üíº NFTs Collection Tickers by ID
 */
export type nftsIdTickersResponse200 = {
  data: NFTTickers;
  status: 200;
};

export type nftsIdTickersResponseComposite = nftsIdTickersResponse200;

export type nftsIdTickersResponse = nftsIdTickersResponseComposite & {
  headers: Headers;
};

export const getNftsIdTickersUrl = (id: string) => {
  return `https://pro-api.coingecko.com/api/v3/nfts/${id}/tickers`;
};

export const nftsIdTickers = async (
  id: string,
  options?: RequestInit,
): Promise<nftsIdTickersResponse> => {
  return request<nftsIdTickersResponse>(getNftsIdTickersUrl(id), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query BTC exchange rates with other currencies**
 * @summary BTC-to-Currency Exchange Rates
 */
export type exchangeRatesResponse200 = {
  data: ExchangeRates;
  status: 200;
};

export type exchangeRatesResponseComposite = exchangeRatesResponse200;

export type exchangeRatesResponse = exchangeRatesResponseComposite & {
  headers: Headers;
};

export const getExchangeRatesUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/exchange_rates`;
};

export const exchangeRates = async (
  options?: RequestInit,
): Promise<exchangeRatesResponse> => {
  return request<exchangeRatesResponse>(getExchangeRatesUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **search for coins, categories and markets listed on CoinGecko**
 * @summary Search Queries
 */
export type searchDataResponse200 = {
  data: Search;
  status: 200;
};

export type searchDataResponseComposite = searchDataResponse200;

export type searchDataResponse = searchDataResponseComposite & {
  headers: Headers;
};

export const getSearchDataUrl = (params: SearchDataParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/search?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/search`;
};

export const searchData = async (
  params: SearchDataParams,
  options?: RequestInit,
): Promise<searchDataResponse> => {
  return request<searchDataResponse>(getSearchDataUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you **query trending search coins, NFTs and categories on CoinGecko in the last 24 hours**
 * @summary Trending Search List
 */
export type trendingSearchResponse200 = {
  data: TrendingSearch;
  status: 200;
};

export type trendingSearchResponseComposite = trendingSearchResponse200;

export type trendingSearchResponse = trendingSearchResponseComposite & {
  headers: Headers;
};

export const getTrendingSearchUrl = (params?: TrendingSearchParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/search/trending?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/search/trending`;
};

export const trendingSearch = async (
  params?: TrendingSearchParams,
  options?: RequestInit,
): Promise<trendingSearchResponse> => {
  return request<trendingSearchResponse>(getTrendingSearchUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you **query cryptocurrency global data including active cryptocurrencies, markets, total crypto market cap and etc**
 * @summary Crypto Global Market Data
 */
export type cryptoGlobalResponse200 = {
  data: Global;
  status: 200;
};

export type cryptoGlobalResponseComposite = cryptoGlobalResponse200;

export type cryptoGlobalResponse = cryptoGlobalResponseComposite & {
  headers: Headers;
};

export const getCryptoGlobalUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/global`;
};

export const cryptoGlobal = async (
  options?: RequestInit,
): Promise<cryptoGlobalResponse> => {
  return request<cryptoGlobalResponse>(getCryptoGlobalUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you **query top 100 cryptocurrency global decentralized finance (DeFi) data including DeFi market cap, trading volume**
 * @summary Global De-Fi Market Data
 */
export type globalDeFiResponse200 = {
  data: GlobalDeFi;
  status: 200;
};

export type globalDeFiResponseComposite = globalDeFiResponse200;

export type globalDeFiResponse = globalDeFiResponseComposite & {
  headers: Headers;
};

export const getGlobalDeFiUrl = () => {
  return `https://pro-api.coingecko.com/api/v3/global/decentralized_finance_defi`;
};

export const globalDeFi = async (
  options?: RequestInit,
): Promise<globalDeFiResponse> => {
  return request<globalDeFiResponse>(getGlobalDeFiUrl(), {
    ...options,
    method: "GET",
  });
};

/**
 * This endpoint allows you to **query historical global market cap and volume data by number of days away from now**
 * @summary üíº Global Market Cap Chart Data
 */
export type globalMarketCapChartResponse200 = {
  data: GlobalMarketCapChart;
  status: 200;
};

export type globalMarketCapChartResponseComposite =
  globalMarketCapChartResponse200;

export type globalMarketCapChartResponse =
  globalMarketCapChartResponseComposite & {
    headers: Headers;
  };

export const getGlobalMarketCapChartUrl = (
  params: GlobalMarketCapChartParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `https://pro-api.coingecko.com/api/v3/global/market_cap_chart?${stringifiedParams}`
    : `https://pro-api.coingecko.com/api/v3/global/market_cap_chart`;
};

export const globalMarketCapChart = async (
  params: GlobalMarketCapChartParams,
  options?: RequestInit,
): Promise<globalMarketCapChartResponse> => {
  return request<globalMarketCapChartResponse>(
    getGlobalMarketCapChartUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * This endpoint allows you **query public companies‚Äô Bitcoin or Ethereum holdings**
 * @summary Public Companies Holdings
 */
export type companiesPublicTreasuryResponse200 = {
  data: CompaniesTreasury;
  status: 200;
};

export type companiesPublicTreasuryResponseComposite =
  companiesPublicTreasuryResponse200;

export type companiesPublicTreasuryResponse =
  companiesPublicTreasuryResponseComposite & {
    headers: Headers;
  };

export const getCompaniesPublicTreasuryUrl = (
  coinId: "bitcoin" | "ethereum",
) => {
  return `https://pro-api.coingecko.com/api/v3/companies/public_treasury/${coinId}`;
};

export const companiesPublicTreasury = async (
  coinId: "bitcoin" | "ethereum",
  options?: RequestInit,
): Promise<companiesPublicTreasuryResponse> => {
  return request<companiesPublicTreasuryResponse>(
    getCompaniesPublicTreasuryUrl(coinId),
    {
      ...options,
      method: "GET",
    },
  );
};
